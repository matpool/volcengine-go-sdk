// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dbw

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeExampleSQLCommon = "DescribeExampleSQL"

// DescribeExampleSQLCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeExampleSQLCommon operation. The "output" return
// value will be populated with the DescribeExampleSQLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeExampleSQLCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeExampleSQLCommon Send returns without error.
//
// See DescribeExampleSQLCommon for more information on using the DescribeExampleSQLCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeExampleSQLCommonRequest method.
//    req, resp := client.DescribeExampleSQLCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DescribeExampleSQLCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeExampleSQLCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeExampleSQLCommon API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DescribeExampleSQLCommon for usage and error information.
func (c *DBW) DescribeExampleSQLCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeExampleSQLCommonRequest(input)
	return out, req.Send()
}

// DescribeExampleSQLCommonWithContext is the same as DescribeExampleSQLCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeExampleSQLCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DescribeExampleSQLCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeExampleSQLCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeExampleSQL = "DescribeExampleSQL"

// DescribeExampleSQLRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeExampleSQL operation. The "output" return
// value will be populated with the DescribeExampleSQLCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeExampleSQLCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeExampleSQLCommon Send returns without error.
//
// See DescribeExampleSQL for more information on using the DescribeExampleSQL
// API call, and error handling.
//
//    // Example sending a request using the DescribeExampleSQLRequest method.
//    req, resp := client.DescribeExampleSQLRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DescribeExampleSQLRequest(input *DescribeExampleSQLInput) (req *request.Request, output *DescribeExampleSQLOutput) {
	op := &request.Operation{
		Name:       opDescribeExampleSQL,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeExampleSQLInput{}
	}

	output = &DescribeExampleSQLOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeExampleSQL API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DescribeExampleSQL for usage and error information.
func (c *DBW) DescribeExampleSQL(input *DescribeExampleSQLInput) (*DescribeExampleSQLOutput, error) {
	req, out := c.DescribeExampleSQLRequest(input)
	return out, req.Send()
}

// DescribeExampleSQLWithContext is the same as DescribeExampleSQL with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeExampleSQL for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DescribeExampleSQLWithContext(ctx volcengine.Context, input *DescribeExampleSQLInput, opts ...request.Option) (*DescribeExampleSQLOutput, error) {
	req, out := c.DescribeExampleSQLRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeExampleSQLInput struct {
	_ struct{} `type:"structure"`

	DSType *string `type:"string" enum:"EnumOfDSTypeForDescribeExampleSQLInput"`

	EndTime *int32 `type:"int32"`

	InstanceId *string `type:"string"`

	RegionId *string `type:"string"`

	SearchParam *SearchParamForDescribeExampleSQLInput `type:"structure"`

	StartTime *int32 `type:"int32"`
}

// String returns the string representation
func (s DescribeExampleSQLInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeExampleSQLInput) GoString() string {
	return s.String()
}

// SetDSType sets the DSType field's value.
func (s *DescribeExampleSQLInput) SetDSType(v string) *DescribeExampleSQLInput {
	s.DSType = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeExampleSQLInput) SetEndTime(v int32) *DescribeExampleSQLInput {
	s.EndTime = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeExampleSQLInput) SetInstanceId(v string) *DescribeExampleSQLInput {
	s.InstanceId = &v
	return s
}

// SetRegionId sets the RegionId field's value.
func (s *DescribeExampleSQLInput) SetRegionId(v string) *DescribeExampleSQLInput {
	s.RegionId = &v
	return s
}

// SetSearchParam sets the SearchParam field's value.
func (s *DescribeExampleSQLInput) SetSearchParam(v *SearchParamForDescribeExampleSQLInput) *DescribeExampleSQLInput {
	s.SearchParam = v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeExampleSQLInput) SetStartTime(v int32) *DescribeExampleSQLInput {
	s.StartTime = &v
	return s
}

type DescribeExampleSQLOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	SQLText *string `type:"string"`
}

// String returns the string representation
func (s DescribeExampleSQLOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeExampleSQLOutput) GoString() string {
	return s.String()
}

// SetSQLText sets the SQLText field's value.
func (s *DescribeExampleSQLOutput) SetSQLText(v string) *DescribeExampleSQLOutput {
	s.SQLText = &v
	return s
}

type SearchParamForDescribeExampleSQLInput struct {
	_ struct{} `type:"structure"`

	DBs []*string `type:"list"`

	MaxQueryTime *float64 `type:"double"`

	MinQueryTime *float64 `type:"double"`

	SQLTemplate *string `type:"string"`

	SourceIPs []*string `type:"list"`

	Users []*string `type:"list"`
}

// String returns the string representation
func (s SearchParamForDescribeExampleSQLInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s SearchParamForDescribeExampleSQLInput) GoString() string {
	return s.String()
}

// SetDBs sets the DBs field's value.
func (s *SearchParamForDescribeExampleSQLInput) SetDBs(v []*string) *SearchParamForDescribeExampleSQLInput {
	s.DBs = v
	return s
}

// SetMaxQueryTime sets the MaxQueryTime field's value.
func (s *SearchParamForDescribeExampleSQLInput) SetMaxQueryTime(v float64) *SearchParamForDescribeExampleSQLInput {
	s.MaxQueryTime = &v
	return s
}

// SetMinQueryTime sets the MinQueryTime field's value.
func (s *SearchParamForDescribeExampleSQLInput) SetMinQueryTime(v float64) *SearchParamForDescribeExampleSQLInput {
	s.MinQueryTime = &v
	return s
}

// SetSQLTemplate sets the SQLTemplate field's value.
func (s *SearchParamForDescribeExampleSQLInput) SetSQLTemplate(v string) *SearchParamForDescribeExampleSQLInput {
	s.SQLTemplate = &v
	return s
}

// SetSourceIPs sets the SourceIPs field's value.
func (s *SearchParamForDescribeExampleSQLInput) SetSourceIPs(v []*string) *SearchParamForDescribeExampleSQLInput {
	s.SourceIPs = v
	return s
}

// SetUsers sets the Users field's value.
func (s *SearchParamForDescribeExampleSQLInput) SetUsers(v []*string) *SearchParamForDescribeExampleSQLInput {
	s.Users = v
	return s
}

const (
	// EnumOfDSTypeForDescribeExampleSQLInputMongo is a EnumOfDSTypeForDescribeExampleSQLInput enum value
	EnumOfDSTypeForDescribeExampleSQLInputMongo = "Mongo"

	// EnumOfDSTypeForDescribeExampleSQLInputMySql is a EnumOfDSTypeForDescribeExampleSQLInput enum value
	EnumOfDSTypeForDescribeExampleSQLInputMySql = "MySQL"

	// EnumOfDSTypeForDescribeExampleSQLInputPostgres is a EnumOfDSTypeForDescribeExampleSQLInput enum value
	EnumOfDSTypeForDescribeExampleSQLInputPostgres = "Postgres"

	// EnumOfDSTypeForDescribeExampleSQLInputRedis is a EnumOfDSTypeForDescribeExampleSQLInput enum value
	EnumOfDSTypeForDescribeExampleSQLInputRedis = "Redis"

	// EnumOfDSTypeForDescribeExampleSQLInputVeDbmySql is a EnumOfDSTypeForDescribeExampleSQLInput enum value
	EnumOfDSTypeForDescribeExampleSQLInputVeDbmySql = "VeDBMySQL"
)
