// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dbw

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDataSessionKeepAliveCommon = "DataSessionKeepAlive"

// DataSessionKeepAliveCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DataSessionKeepAliveCommon operation. The "output" return
// value will be populated with the DataSessionKeepAliveCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DataSessionKeepAliveCommon Request to send the API call to the service.
// the "output" return value is not valid until after DataSessionKeepAliveCommon Send returns without error.
//
// See DataSessionKeepAliveCommon for more information on using the DataSessionKeepAliveCommon
// API call, and error handling.
//
//    // Example sending a request using the DataSessionKeepAliveCommonRequest method.
//    req, resp := client.DataSessionKeepAliveCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DataSessionKeepAliveCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDataSessionKeepAliveCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DataSessionKeepAliveCommon API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DataSessionKeepAliveCommon for usage and error information.
func (c *DBW) DataSessionKeepAliveCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DataSessionKeepAliveCommonRequest(input)
	return out, req.Send()
}

// DataSessionKeepAliveCommonWithContext is the same as DataSessionKeepAliveCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DataSessionKeepAliveCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DataSessionKeepAliveCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DataSessionKeepAliveCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDataSessionKeepAlive = "DataSessionKeepAlive"

// DataSessionKeepAliveRequest generates a "volcengine/request.Request" representing the
// client's request for the DataSessionKeepAlive operation. The "output" return
// value will be populated with the DataSessionKeepAliveCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DataSessionKeepAliveCommon Request to send the API call to the service.
// the "output" return value is not valid until after DataSessionKeepAliveCommon Send returns without error.
//
// See DataSessionKeepAlive for more information on using the DataSessionKeepAlive
// API call, and error handling.
//
//    // Example sending a request using the DataSessionKeepAliveRequest method.
//    req, resp := client.DataSessionKeepAliveRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DataSessionKeepAliveRequest(input *DataSessionKeepAliveInput) (req *request.Request, output *DataSessionKeepAliveOutput) {
	op := &request.Operation{
		Name:       opDataSessionKeepAlive,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DataSessionKeepAliveInput{}
	}

	output = &DataSessionKeepAliveOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DataSessionKeepAlive API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DataSessionKeepAlive for usage and error information.
func (c *DBW) DataSessionKeepAlive(input *DataSessionKeepAliveInput) (*DataSessionKeepAliveOutput, error) {
	req, out := c.DataSessionKeepAliveRequest(input)
	return out, req.Send()
}

// DataSessionKeepAliveWithContext is the same as DataSessionKeepAlive with the addition of
// the ability to pass a context and additional request options.
//
// See DataSessionKeepAlive for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DataSessionKeepAliveWithContext(ctx volcengine.Context, input *DataSessionKeepAliveInput, opts ...request.Option) (*DataSessionKeepAliveOutput, error) {
	req, out := c.DataSessionKeepAliveRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataSessionKeepAliveInput struct {
	_ struct{} `type:"structure"`

	SessionId *string `type:"string"`
}

// String returns the string representation
func (s DataSessionKeepAliveInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataSessionKeepAliveInput) GoString() string {
	return s.String()
}

// SetSessionId sets the SessionId field's value.
func (s *DataSessionKeepAliveInput) SetSessionId(v string) *DataSessionKeepAliveInput {
	s.SessionId = &v
	return s
}

type DataSessionKeepAliveOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DataSessionKeepAliveOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataSessionKeepAliveOutput) GoString() string {
	return s.String()
}
