// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dbw

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDataCloseSessionCommon = "DataCloseSession"

// DataCloseSessionCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DataCloseSessionCommon operation. The "output" return
// value will be populated with the DataCloseSessionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DataCloseSessionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DataCloseSessionCommon Send returns without error.
//
// See DataCloseSessionCommon for more information on using the DataCloseSessionCommon
// API call, and error handling.
//
//    // Example sending a request using the DataCloseSessionCommonRequest method.
//    req, resp := client.DataCloseSessionCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DataCloseSessionCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDataCloseSessionCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DataCloseSessionCommon API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DataCloseSessionCommon for usage and error information.
func (c *DBW) DataCloseSessionCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DataCloseSessionCommonRequest(input)
	return out, req.Send()
}

// DataCloseSessionCommonWithContext is the same as DataCloseSessionCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DataCloseSessionCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DataCloseSessionCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DataCloseSessionCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDataCloseSession = "DataCloseSession"

// DataCloseSessionRequest generates a "volcengine/request.Request" representing the
// client's request for the DataCloseSession operation. The "output" return
// value will be populated with the DataCloseSessionCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DataCloseSessionCommon Request to send the API call to the service.
// the "output" return value is not valid until after DataCloseSessionCommon Send returns without error.
//
// See DataCloseSession for more information on using the DataCloseSession
// API call, and error handling.
//
//    // Example sending a request using the DataCloseSessionRequest method.
//    req, resp := client.DataCloseSessionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DataCloseSessionRequest(input *DataCloseSessionInput) (req *request.Request, output *DataCloseSessionOutput) {
	op := &request.Operation{
		Name:       opDataCloseSession,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DataCloseSessionInput{}
	}

	output = &DataCloseSessionOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DataCloseSession API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DataCloseSession for usage and error information.
func (c *DBW) DataCloseSession(input *DataCloseSessionInput) (*DataCloseSessionOutput, error) {
	req, out := c.DataCloseSessionRequest(input)
	return out, req.Send()
}

// DataCloseSessionWithContext is the same as DataCloseSession with the addition of
// the ability to pass a context and additional request options.
//
// See DataCloseSession for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DataCloseSessionWithContext(ctx volcengine.Context, input *DataCloseSessionInput, opts ...request.Option) (*DataCloseSessionOutput, error) {
	req, out := c.DataCloseSessionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataCloseSessionInput struct {
	_ struct{} `type:"structure"`

	SessionId *string `type:"string"`
}

// String returns the string representation
func (s DataCloseSessionInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataCloseSessionInput) GoString() string {
	return s.String()
}

// SetSessionId sets the SessionId field's value.
func (s *DataCloseSessionInput) SetSessionId(v string) *DataCloseSessionInput {
	s.SessionId = &v
	return s
}

type DataCloseSessionOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DataCloseSessionOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataCloseSessionOutput) GoString() string {
	return s.String()
}
