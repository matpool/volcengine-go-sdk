// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package dbw

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDataConnectInstanceCommon = "DataConnectInstance"

// DataConnectInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DataConnectInstanceCommon operation. The "output" return
// value will be populated with the DataConnectInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DataConnectInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DataConnectInstanceCommon Send returns without error.
//
// See DataConnectInstanceCommon for more information on using the DataConnectInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the DataConnectInstanceCommonRequest method.
//    req, resp := client.DataConnectInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DataConnectInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDataConnectInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DataConnectInstanceCommon API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DataConnectInstanceCommon for usage and error information.
func (c *DBW) DataConnectInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DataConnectInstanceCommonRequest(input)
	return out, req.Send()
}

// DataConnectInstanceCommonWithContext is the same as DataConnectInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DataConnectInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DataConnectInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DataConnectInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDataConnectInstance = "DataConnectInstance"

// DataConnectInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the DataConnectInstance operation. The "output" return
// value will be populated with the DataConnectInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DataConnectInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after DataConnectInstanceCommon Send returns without error.
//
// See DataConnectInstance for more information on using the DataConnectInstance
// API call, and error handling.
//
//    // Example sending a request using the DataConnectInstanceRequest method.
//    req, resp := client.DataConnectInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *DBW) DataConnectInstanceRequest(input *DataConnectInstanceInput) (req *request.Request, output *DataConnectInstanceOutput) {
	op := &request.Operation{
		Name:       opDataConnectInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DataConnectInstanceInput{}
	}

	output = &DataConnectInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DataConnectInstance API operation for DBW.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for DBW's
// API operation DataConnectInstance for usage and error information.
func (c *DBW) DataConnectInstance(input *DataConnectInstanceInput) (*DataConnectInstanceOutput, error) {
	req, out := c.DataConnectInstanceRequest(input)
	return out, req.Send()
}

// DataConnectInstanceWithContext is the same as DataConnectInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DataConnectInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *DBW) DataConnectInstanceWithContext(ctx volcengine.Context, input *DataConnectInstanceInput, opts ...request.Option) (*DataConnectInstanceOutput, error) {
	req, out := c.DataConnectInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataConnectInstanceInput struct {
	_ struct{} `type:"structure"`

	DatabaseName *string `type:"string"`

	InstanceId *string `type:"string"`

	InstanceType *string `type:"string"`

	KeepAliveOverTime *int64 `type:"int64"`

	Password *string `type:"string"`

	Username *string `type:"string"`
}

// String returns the string representation
func (s DataConnectInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataConnectInstanceInput) GoString() string {
	return s.String()
}

// SetDatabaseName sets the DatabaseName field's value.
func (s *DataConnectInstanceInput) SetDatabaseName(v string) *DataConnectInstanceInput {
	s.DatabaseName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *DataConnectInstanceInput) SetInstanceId(v string) *DataConnectInstanceInput {
	s.InstanceId = &v
	return s
}

// SetInstanceType sets the InstanceType field's value.
func (s *DataConnectInstanceInput) SetInstanceType(v string) *DataConnectInstanceInput {
	s.InstanceType = &v
	return s
}

// SetKeepAliveOverTime sets the KeepAliveOverTime field's value.
func (s *DataConnectInstanceInput) SetKeepAliveOverTime(v int64) *DataConnectInstanceInput {
	s.KeepAliveOverTime = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *DataConnectInstanceInput) SetPassword(v string) *DataConnectInstanceInput {
	s.Password = &v
	return s
}

// SetUsername sets the Username field's value.
func (s *DataConnectInstanceInput) SetUsername(v string) *DataConnectInstanceInput {
	s.Username = &v
	return s
}

type DataConnectInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DatabaseName *string `type:"string"`

	SessionId *string `type:"string"`
}

// String returns the string representation
func (s DataConnectInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataConnectInstanceOutput) GoString() string {
	return s.String()
}

// SetDatabaseName sets the DatabaseName field's value.
func (s *DataConnectInstanceOutput) SetDatabaseName(v string) *DataConnectInstanceOutput {
	s.DatabaseName = &v
	return s
}

// SetSessionId sets the SessionId field's value.
func (s *DataConnectInstanceOutput) SetSessionId(v string) *DataConnectInstanceOutput {
	s.SessionId = &v
	return s
}
