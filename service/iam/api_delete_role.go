// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteRoleCommon = "DeleteRole"

// DeleteRoleCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteRoleCommon operation. The "output" return
// value will be populated with the DeleteRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRoleCommon Send returns without error.
//
// See DeleteRoleCommon for more information on using the DeleteRoleCommon
// API call, and error handling.
//
//    // Example sending a request using the DeleteRoleCommonRequest method.
//    req, resp := client.DeleteRoleCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) DeleteRoleCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteRoleCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRoleCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation DeleteRoleCommon for usage and error information.
func (c *IAM) DeleteRoleCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteRoleCommonRequest(input)
	return out, req.Send()
}

// DeleteRoleCommonWithContext is the same as DeleteRoleCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRoleCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) DeleteRoleCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteRoleCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteRole = "DeleteRole"

// DeleteRoleRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteRole operation. The "output" return
// value will be populated with the DeleteRoleCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteRoleCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteRoleCommon Send returns without error.
//
// See DeleteRole for more information on using the DeleteRole
// API call, and error handling.
//
//    // Example sending a request using the DeleteRoleRequest method.
//    req, resp := client.DeleteRoleRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) DeleteRoleRequest(input *DeleteRoleInput) (req *request.Request, output *DeleteRoleOutput) {
	op := &request.Operation{
		Name:       opDeleteRole,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteRoleInput{}
	}

	output = &DeleteRoleOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteRole API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation DeleteRole for usage and error information.
func (c *IAM) DeleteRole(input *DeleteRoleInput) (*DeleteRoleOutput, error) {
	req, out := c.DeleteRoleRequest(input)
	return out, req.Send()
}

// DeleteRoleWithContext is the same as DeleteRole with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteRole for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) DeleteRoleWithContext(ctx volcengine.Context, input *DeleteRoleInput, opts ...request.Option) (*DeleteRoleOutput, error) {
	req, out := c.DeleteRoleRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteRoleInput struct {
	_ struct{} `type:"structure"`

	// RoleName is a required field
	RoleName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteRoleInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRoleInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteRoleInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteRoleInput"}
	if s.RoleName == nil {
		invalidParams.Add(request.NewErrParamRequired("RoleName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetRoleName sets the RoleName field's value.
func (s *DeleteRoleInput) SetRoleName(v string) *DeleteRoleInput {
	s.RoleName = &v
	return s
}

type DeleteRoleOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DeleteRoleOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteRoleOutput) GoString() string {
	return s.String()
}
