// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateLoginProfileCommon = "CreateLoginProfile"

// CreateLoginProfileCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateLoginProfileCommon operation. The "output" return
// value will be populated with the CreateLoginProfileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateLoginProfileCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateLoginProfileCommon Send returns without error.
//
// See CreateLoginProfileCommon for more information on using the CreateLoginProfileCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateLoginProfileCommonRequest method.
//    req, resp := client.CreateLoginProfileCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) CreateLoginProfileCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateLoginProfileCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// CreateLoginProfileCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation CreateLoginProfileCommon for usage and error information.
func (c *IAM) CreateLoginProfileCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateLoginProfileCommonRequest(input)
	return out, req.Send()
}

// CreateLoginProfileCommonWithContext is the same as CreateLoginProfileCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateLoginProfileCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) CreateLoginProfileCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateLoginProfileCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateLoginProfile = "CreateLoginProfile"

// CreateLoginProfileRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateLoginProfile operation. The "output" return
// value will be populated with the CreateLoginProfileCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateLoginProfileCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateLoginProfileCommon Send returns without error.
//
// See CreateLoginProfile for more information on using the CreateLoginProfile
// API call, and error handling.
//
//    // Example sending a request using the CreateLoginProfileRequest method.
//    req, resp := client.CreateLoginProfileRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) CreateLoginProfileRequest(input *CreateLoginProfileInput) (req *request.Request, output *CreateLoginProfileOutput) {
	op := &request.Operation{
		Name:       opCreateLoginProfile,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateLoginProfileInput{}
	}

	output = &CreateLoginProfileOutput{}
	req = c.newRequest(op, input, output)

	return
}

// CreateLoginProfile API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation CreateLoginProfile for usage and error information.
func (c *IAM) CreateLoginProfile(input *CreateLoginProfileInput) (*CreateLoginProfileOutput, error) {
	req, out := c.CreateLoginProfileRequest(input)
	return out, req.Send()
}

// CreateLoginProfileWithContext is the same as CreateLoginProfile with the addition of
// the ability to pass a context and additional request options.
//
// See CreateLoginProfile for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) CreateLoginProfileWithContext(ctx volcengine.Context, input *CreateLoginProfileInput, opts ...request.Option) (*CreateLoginProfileOutput, error) {
	req, out := c.CreateLoginProfileRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateLoginProfileInput struct {
	_ struct{} `type:"structure"`

	LoginAllowed *bool `type:"boolean"`

	// Password is a required field
	Password *string `type:"string" required:"true"`

	PasswordResetRequired *bool `type:"boolean"`

	SafeAuthExemptDuration *int64 `type:"integer"`

	SafeAuthFlag *bool `type:"boolean"`

	SafeAuthType *string `type:"string"`

	// UserName is a required field
	UserName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateLoginProfileInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoginProfileInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateLoginProfileInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateLoginProfileInput"}
	if s.Password == nil {
		invalidParams.Add(request.NewErrParamRequired("Password"))
	}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoginAllowed sets the LoginAllowed field's value.
func (s *CreateLoginProfileInput) SetLoginAllowed(v bool) *CreateLoginProfileInput {
	s.LoginAllowed = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *CreateLoginProfileInput) SetPassword(v string) *CreateLoginProfileInput {
	s.Password = &v
	return s
}

// SetPasswordResetRequired sets the PasswordResetRequired field's value.
func (s *CreateLoginProfileInput) SetPasswordResetRequired(v bool) *CreateLoginProfileInput {
	s.PasswordResetRequired = &v
	return s
}

// SetSafeAuthExemptDuration sets the SafeAuthExemptDuration field's value.
func (s *CreateLoginProfileInput) SetSafeAuthExemptDuration(v int64) *CreateLoginProfileInput {
	s.SafeAuthExemptDuration = &v
	return s
}

// SetSafeAuthFlag sets the SafeAuthFlag field's value.
func (s *CreateLoginProfileInput) SetSafeAuthFlag(v bool) *CreateLoginProfileInput {
	s.SafeAuthFlag = &v
	return s
}

// SetSafeAuthType sets the SafeAuthType field's value.
func (s *CreateLoginProfileInput) SetSafeAuthType(v string) *CreateLoginProfileInput {
	s.SafeAuthType = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *CreateLoginProfileInput) SetUserName(v string) *CreateLoginProfileInput {
	s.UserName = &v
	return s
}

type CreateLoginProfileOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	LoginProfile *LoginProfileForCreateLoginProfileOutput `type:"structure"`
}

// String returns the string representation
func (s CreateLoginProfileOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateLoginProfileOutput) GoString() string {
	return s.String()
}

// SetLoginProfile sets the LoginProfile field's value.
func (s *CreateLoginProfileOutput) SetLoginProfile(v *LoginProfileForCreateLoginProfileOutput) *CreateLoginProfileOutput {
	s.LoginProfile = v
	return s
}

type LoginProfileForCreateLoginProfileOutput struct {
	_ struct{} `type:"structure"`

	LastLoginDate *string `type:"string"`

	LastLoginIp *string `type:"string"`

	LoginAllowed *bool `type:"boolean"`

	PasswordResetRequired *bool `type:"boolean"`

	UserName *string `type:"string"`
}

// String returns the string representation
func (s LoginProfileForCreateLoginProfileOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s LoginProfileForCreateLoginProfileOutput) GoString() string {
	return s.String()
}

// SetLastLoginDate sets the LastLoginDate field's value.
func (s *LoginProfileForCreateLoginProfileOutput) SetLastLoginDate(v string) *LoginProfileForCreateLoginProfileOutput {
	s.LastLoginDate = &v
	return s
}

// SetLastLoginIp sets the LastLoginIp field's value.
func (s *LoginProfileForCreateLoginProfileOutput) SetLastLoginIp(v string) *LoginProfileForCreateLoginProfileOutput {
	s.LastLoginIp = &v
	return s
}

// SetLoginAllowed sets the LoginAllowed field's value.
func (s *LoginProfileForCreateLoginProfileOutput) SetLoginAllowed(v bool) *LoginProfileForCreateLoginProfileOutput {
	s.LoginAllowed = &v
	return s
}

// SetPasswordResetRequired sets the PasswordResetRequired field's value.
func (s *LoginProfileForCreateLoginProfileOutput) SetPasswordResetRequired(v bool) *LoginProfileForCreateLoginProfileOutput {
	s.PasswordResetRequired = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *LoginProfileForCreateLoginProfileOutput) SetUserName(v string) *LoginProfileForCreateLoginProfileOutput {
	s.UserName = &v
	return s
}
