// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListGroupsForUserCommon = "ListGroupsForUser"

// ListGroupsForUserCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListGroupsForUserCommon operation. The "output" return
// value will be populated with the ListGroupsForUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListGroupsForUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListGroupsForUserCommon Send returns without error.
//
// See ListGroupsForUserCommon for more information on using the ListGroupsForUserCommon
// API call, and error handling.
//
//    // Example sending a request using the ListGroupsForUserCommonRequest method.
//    req, resp := client.ListGroupsForUserCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) ListGroupsForUserCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListGroupsForUserCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListGroupsForUserCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation ListGroupsForUserCommon for usage and error information.
func (c *IAM) ListGroupsForUserCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListGroupsForUserCommonRequest(input)
	return out, req.Send()
}

// ListGroupsForUserCommonWithContext is the same as ListGroupsForUserCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListGroupsForUserCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListGroupsForUserCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListGroupsForUserCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListGroupsForUser = "ListGroupsForUser"

// ListGroupsForUserRequest generates a "volcengine/request.Request" representing the
// client's request for the ListGroupsForUser operation. The "output" return
// value will be populated with the ListGroupsForUserCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListGroupsForUserCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListGroupsForUserCommon Send returns without error.
//
// See ListGroupsForUser for more information on using the ListGroupsForUser
// API call, and error handling.
//
//    // Example sending a request using the ListGroupsForUserRequest method.
//    req, resp := client.ListGroupsForUserRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) ListGroupsForUserRequest(input *ListGroupsForUserInput) (req *request.Request, output *ListGroupsForUserOutput) {
	op := &request.Operation{
		Name:       opListGroupsForUser,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListGroupsForUserInput{}
	}

	output = &ListGroupsForUserOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListGroupsForUser API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation ListGroupsForUser for usage and error information.
func (c *IAM) ListGroupsForUser(input *ListGroupsForUserInput) (*ListGroupsForUserOutput, error) {
	req, out := c.ListGroupsForUserRequest(input)
	return out, req.Send()
}

// ListGroupsForUserWithContext is the same as ListGroupsForUser with the addition of
// the ability to pass a context and additional request options.
//
// See ListGroupsForUser for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListGroupsForUserWithContext(ctx volcengine.Context, input *ListGroupsForUserInput, opts ...request.Option) (*ListGroupsForUserOutput, error) {
	req, out := c.ListGroupsForUserRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ListGroupsForUserInput struct {
	_ struct{} `type:"structure"`

	Limit *int64 `type:"integer"`

	Offset *string `type:"string"`

	Query *string `type:"string"`

	// UserName is a required field
	UserName *string `type:"string" required:"true"`
}

// String returns the string representation
func (s ListGroupsForUserInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupsForUserInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ListGroupsForUserInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ListGroupsForUserInput"}
	if s.UserName == nil {
		invalidParams.Add(request.NewErrParamRequired("UserName"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLimit sets the Limit field's value.
func (s *ListGroupsForUserInput) SetLimit(v int64) *ListGroupsForUserInput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListGroupsForUserInput) SetOffset(v string) *ListGroupsForUserInput {
	s.Offset = &v
	return s
}

// SetQuery sets the Query field's value.
func (s *ListGroupsForUserInput) SetQuery(v string) *ListGroupsForUserInput {
	s.Query = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *ListGroupsForUserInput) SetUserName(v string) *ListGroupsForUserInput {
	s.UserName = &v
	return s
}

type ListGroupsForUserOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Limit *int32 `type:"int32"`

	Offset *int32 `type:"int32"`

	Total *int32 `type:"int32"`

	UserGroups []*UserGroupForListGroupsForUserOutput `type:"list"`
}

// String returns the string representation
func (s ListGroupsForUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListGroupsForUserOutput) GoString() string {
	return s.String()
}

// SetLimit sets the Limit field's value.
func (s *ListGroupsForUserOutput) SetLimit(v int32) *ListGroupsForUserOutput {
	s.Limit = &v
	return s
}

// SetOffset sets the Offset field's value.
func (s *ListGroupsForUserOutput) SetOffset(v int32) *ListGroupsForUserOutput {
	s.Offset = &v
	return s
}

// SetTotal sets the Total field's value.
func (s *ListGroupsForUserOutput) SetTotal(v int32) *ListGroupsForUserOutput {
	s.Total = &v
	return s
}

// SetUserGroups sets the UserGroups field's value.
func (s *ListGroupsForUserOutput) SetUserGroups(v []*UserGroupForListGroupsForUserOutput) *ListGroupsForUserOutput {
	s.UserGroups = v
	return s
}

type UserGroupForListGroupsForUserOutput struct {
	_ struct{} `type:"structure"`

	Description *string `type:"string"`

	DisplayName *string `type:"string"`

	JoinDate *string `type:"string"`

	UserGroupName *string `type:"string"`
}

// String returns the string representation
func (s UserGroupForListGroupsForUserOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UserGroupForListGroupsForUserOutput) GoString() string {
	return s.String()
}

// SetDescription sets the Description field's value.
func (s *UserGroupForListGroupsForUserOutput) SetDescription(v string) *UserGroupForListGroupsForUserOutput {
	s.Description = &v
	return s
}

// SetDisplayName sets the DisplayName field's value.
func (s *UserGroupForListGroupsForUserOutput) SetDisplayName(v string) *UserGroupForListGroupsForUserOutput {
	s.DisplayName = &v
	return s
}

// SetJoinDate sets the JoinDate field's value.
func (s *UserGroupForListGroupsForUserOutput) SetJoinDate(v string) *UserGroupForListGroupsForUserOutput {
	s.JoinDate = &v
	return s
}

// SetUserGroupName sets the UserGroupName field's value.
func (s *UserGroupForListGroupsForUserOutput) SetUserGroupName(v string) *UserGroupForListGroupsForUserOutput {
	s.UserGroupName = &v
	return s
}
