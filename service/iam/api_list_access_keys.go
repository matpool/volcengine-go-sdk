// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package iam

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListAccessKeysCommon = "ListAccessKeys"

// ListAccessKeysCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAccessKeysCommon operation. The "output" return
// value will be populated with the ListAccessKeysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAccessKeysCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAccessKeysCommon Send returns without error.
//
// See ListAccessKeysCommon for more information on using the ListAccessKeysCommon
// API call, and error handling.
//
//    // Example sending a request using the ListAccessKeysCommonRequest method.
//    req, resp := client.ListAccessKeysCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) ListAccessKeysCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListAccessKeysCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListAccessKeysCommon API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation ListAccessKeysCommon for usage and error information.
func (c *IAM) ListAccessKeysCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListAccessKeysCommonRequest(input)
	return out, req.Send()
}

// ListAccessKeysCommonWithContext is the same as ListAccessKeysCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListAccessKeysCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListAccessKeysCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListAccessKeysCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListAccessKeys = "ListAccessKeys"

// ListAccessKeysRequest generates a "volcengine/request.Request" representing the
// client's request for the ListAccessKeys operation. The "output" return
// value will be populated with the ListAccessKeysCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListAccessKeysCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListAccessKeysCommon Send returns without error.
//
// See ListAccessKeys for more information on using the ListAccessKeys
// API call, and error handling.
//
//    // Example sending a request using the ListAccessKeysRequest method.
//    req, resp := client.ListAccessKeysRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *IAM) ListAccessKeysRequest(input *ListAccessKeysInput) (req *request.Request, output *ListAccessKeysOutput) {
	op := &request.Operation{
		Name:       opListAccessKeys,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListAccessKeysInput{}
	}

	output = &ListAccessKeysOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListAccessKeys API operation for IAM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for IAM's
// API operation ListAccessKeys for usage and error information.
func (c *IAM) ListAccessKeys(input *ListAccessKeysInput) (*ListAccessKeysOutput, error) {
	req, out := c.ListAccessKeysRequest(input)
	return out, req.Send()
}

// ListAccessKeysWithContext is the same as ListAccessKeys with the addition of
// the ability to pass a context and additional request options.
//
// See ListAccessKeys for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *IAM) ListAccessKeysWithContext(ctx volcengine.Context, input *ListAccessKeysInput, opts ...request.Option) (*ListAccessKeysOutput, error) {
	req, out := c.ListAccessKeysRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccessKeyMetadataForListAccessKeysOutput struct {
	_ struct{} `type:"structure"`

	AccessKeyId *string `type:"string"`

	CreateDate *string `type:"string"`

	Status *string `type:"string"`

	UpdateDate *string `type:"string"`

	UserName *string `type:"string"`
}

// String returns the string representation
func (s AccessKeyMetadataForListAccessKeysOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccessKeyMetadataForListAccessKeysOutput) GoString() string {
	return s.String()
}

// SetAccessKeyId sets the AccessKeyId field's value.
func (s *AccessKeyMetadataForListAccessKeysOutput) SetAccessKeyId(v string) *AccessKeyMetadataForListAccessKeysOutput {
	s.AccessKeyId = &v
	return s
}

// SetCreateDate sets the CreateDate field's value.
func (s *AccessKeyMetadataForListAccessKeysOutput) SetCreateDate(v string) *AccessKeyMetadataForListAccessKeysOutput {
	s.CreateDate = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *AccessKeyMetadataForListAccessKeysOutput) SetStatus(v string) *AccessKeyMetadataForListAccessKeysOutput {
	s.Status = &v
	return s
}

// SetUpdateDate sets the UpdateDate field's value.
func (s *AccessKeyMetadataForListAccessKeysOutput) SetUpdateDate(v string) *AccessKeyMetadataForListAccessKeysOutput {
	s.UpdateDate = &v
	return s
}

// SetUserName sets the UserName field's value.
func (s *AccessKeyMetadataForListAccessKeysOutput) SetUserName(v string) *AccessKeyMetadataForListAccessKeysOutput {
	s.UserName = &v
	return s
}

type ListAccessKeysInput struct {
	_ struct{} `type:"structure"`

	UserName *string `type:"string"`
}

// String returns the string representation
func (s ListAccessKeysInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAccessKeysInput) GoString() string {
	return s.String()
}

// SetUserName sets the UserName field's value.
func (s *ListAccessKeysInput) SetUserName(v string) *ListAccessKeysInput {
	s.UserName = &v
	return s
}

type ListAccessKeysOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	AccessKeyMetadata []*AccessKeyMetadataForListAccessKeysOutput `type:"list"`
}

// String returns the string representation
func (s ListAccessKeysOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListAccessKeysOutput) GoString() string {
	return s.String()
}

// SetAccessKeyMetadata sets the AccessKeyMetadata field's value.
func (s *ListAccessKeysOutput) SetAccessKeyMetadata(v []*AccessKeyMetadataForListAccessKeysOutput) *ListAccessKeysOutput {
	s.AccessKeyMetadata = v
	return s
}
