// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysql

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGrantAccountPrivilegeCommon = "GrantAccountPrivilege"

// GrantAccountPrivilegeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GrantAccountPrivilegeCommon operation. The "output" return
// value will be populated with the GrantAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantAccountPrivilegeCommon Send returns without error.
//
// See GrantAccountPrivilegeCommon for more information on using the GrantAccountPrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the GrantAccountPrivilegeCommonRequest method.
//    req, resp := client.GrantAccountPrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) GrantAccountPrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGrantAccountPrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantAccountPrivilegeCommon API operation for RDS_MYSQL.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL's
// API operation GrantAccountPrivilegeCommon for usage and error information.
func (c *RDSMYSQL) GrantAccountPrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GrantAccountPrivilegeCommonRequest(input)
	return out, req.Send()
}

// GrantAccountPrivilegeCommonWithContext is the same as GrantAccountPrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GrantAccountPrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) GrantAccountPrivilegeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GrantAccountPrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGrantAccountPrivilege = "GrantAccountPrivilege"

// GrantAccountPrivilegeRequest generates a "volcengine/request.Request" representing the
// client's request for the GrantAccountPrivilege operation. The "output" return
// value will be populated with the GrantAccountPrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantAccountPrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantAccountPrivilegeCommon Send returns without error.
//
// See GrantAccountPrivilege for more information on using the GrantAccountPrivilege
// API call, and error handling.
//
//    // Example sending a request using the GrantAccountPrivilegeRequest method.
//    req, resp := client.GrantAccountPrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) GrantAccountPrivilegeRequest(input *GrantAccountPrivilegeInput) (req *request.Request, output *GrantAccountPrivilegeOutput) {
	op := &request.Operation{
		Name:       opGrantAccountPrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GrantAccountPrivilegeInput{}
	}

	output = &GrantAccountPrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantAccountPrivilege API operation for RDS_MYSQL.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL's
// API operation GrantAccountPrivilege for usage and error information.
func (c *RDSMYSQL) GrantAccountPrivilege(input *GrantAccountPrivilegeInput) (*GrantAccountPrivilegeOutput, error) {
	req, out := c.GrantAccountPrivilegeRequest(input)
	return out, req.Send()
}

// GrantAccountPrivilegeWithContext is the same as GrantAccountPrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See GrantAccountPrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) GrantAccountPrivilegeWithContext(ctx volcengine.Context, input *GrantAccountPrivilegeInput, opts ...request.Option) (*GrantAccountPrivilegeOutput, error) {
	req, out := c.GrantAccountPrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type GrantAccountPrivilegeInput struct {
	_ struct{} `type:"structure"`

	// AccountName is a required field
	AccountName *string `min:"2" max:"32" type:"string" required:"true"`

	AccountPrivilege *string `type:"string" enum:"EnumOfAccountPrivilegeForGrantAccountPrivilegeInput"`

	AccountPrivilegeStr *string `type:"string"`

	// DBName is a required field
	DBName *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GrantAccountPrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantAccountPrivilegeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GrantAccountPrivilegeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GrantAccountPrivilegeInput"}
	if s.AccountName == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountName"))
	}
	if s.AccountName != nil && len(*s.AccountName) < 2 {
		invalidParams.Add(request.NewErrParamMinLen("AccountName", 2))
	}
	if s.AccountName != nil && len(*s.AccountName) > 32 {
		invalidParams.Add(request.NewErrParamMaxLen("AccountName", 32, *s.AccountName))
	}
	if s.DBName == nil {
		invalidParams.Add(request.NewErrParamRequired("DBName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountName sets the AccountName field's value.
func (s *GrantAccountPrivilegeInput) SetAccountName(v string) *GrantAccountPrivilegeInput {
	s.AccountName = &v
	return s
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *GrantAccountPrivilegeInput) SetAccountPrivilege(v string) *GrantAccountPrivilegeInput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeStr sets the AccountPrivilegeStr field's value.
func (s *GrantAccountPrivilegeInput) SetAccountPrivilegeStr(v string) *GrantAccountPrivilegeInput {
	s.AccountPrivilegeStr = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *GrantAccountPrivilegeInput) SetDBName(v string) *GrantAccountPrivilegeInput {
	s.DBName = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *GrantAccountPrivilegeInput) SetInstanceId(v string) *GrantAccountPrivilegeInput {
	s.InstanceId = &v
	return s
}

type GrantAccountPrivilegeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s GrantAccountPrivilegeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantAccountPrivilegeOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfAccountPrivilegeForGrantAccountPrivilegeInputCustom is a EnumOfAccountPrivilegeForGrantAccountPrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantAccountPrivilegeInputCustom = "Custom"

	// EnumOfAccountPrivilegeForGrantAccountPrivilegeInputDdlonly is a EnumOfAccountPrivilegeForGrantAccountPrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantAccountPrivilegeInputDdlonly = "DDLOnly"

	// EnumOfAccountPrivilegeForGrantAccountPrivilegeInputDmlonly is a EnumOfAccountPrivilegeForGrantAccountPrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantAccountPrivilegeInputDmlonly = "DMLOnly"

	// EnumOfAccountPrivilegeForGrantAccountPrivilegeInputNone is a EnumOfAccountPrivilegeForGrantAccountPrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantAccountPrivilegeInputNone = "NONE"

	// EnumOfAccountPrivilegeForGrantAccountPrivilegeInputReadOnly is a EnumOfAccountPrivilegeForGrantAccountPrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantAccountPrivilegeInputReadOnly = "ReadOnly"

	// EnumOfAccountPrivilegeForGrantAccountPrivilegeInputReadWrite is a EnumOfAccountPrivilegeForGrantAccountPrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantAccountPrivilegeInputReadWrite = "ReadWrite"
)
