// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysql

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateBackupCommon = "CreateBackup"

// CreateBackupCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateBackupCommon operation. The "output" return
// value will be populated with the CreateBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupCommon Send returns without error.
//
// See CreateBackupCommon for more information on using the CreateBackupCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupCommonRequest method.
//    req, resp := client.CreateBackupCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateBackupCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateBackupCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackupCommon API operation for RDS_MYSQL.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL's
// API operation CreateBackupCommon for usage and error information.
func (c *RDSMYSQL) CreateBackupCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateBackupCommonRequest(input)
	return out, req.Send()
}

// CreateBackupCommonWithContext is the same as CreateBackupCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackupCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateBackupCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateBackupCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateBackup = "CreateBackup"

// CreateBackupRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateBackup operation. The "output" return
// value will be populated with the CreateBackupCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateBackupCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateBackupCommon Send returns without error.
//
// See CreateBackup for more information on using the CreateBackup
// API call, and error handling.
//
//    // Example sending a request using the CreateBackupRequest method.
//    req, resp := client.CreateBackupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) CreateBackupRequest(input *CreateBackupInput) (req *request.Request, output *CreateBackupOutput) {
	op := &request.Operation{
		Name:       opCreateBackup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateBackupInput{}
	}

	output = &CreateBackupOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateBackup API operation for RDS_MYSQL.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL's
// API operation CreateBackup for usage and error information.
func (c *RDSMYSQL) CreateBackup(input *CreateBackupInput) (*CreateBackupOutput, error) {
	req, out := c.CreateBackupRequest(input)
	return out, req.Send()
}

// CreateBackupWithContext is the same as CreateBackup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateBackup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) CreateBackupWithContext(ctx volcengine.Context, input *CreateBackupInput, opts ...request.Option) (*CreateBackupOutput, error) {
	req, out := c.CreateBackupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateBackupInput struct {
	_ struct{} `type:"structure"`

	BackupDataType *string `type:"string" enum:"EnumOfBackupDataTypeForCreateBackupInput"`

	BackupMode *string `type:"string" enum:"EnumOfBackupModeForCreateBackupInput"`

	BackupStrategy *string `type:"string" enum:"EnumOfBackupStrategyForCreateBackupInput"`

	BackupType *string `type:"string" enum:"EnumOfBackupTypeForCreateBackupInput"`

	DBNames *string `type:"string"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateBackupInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateBackupInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateBackupInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetBackupDataType sets the BackupDataType field's value.
func (s *CreateBackupInput) SetBackupDataType(v string) *CreateBackupInput {
	s.BackupDataType = &v
	return s
}

// SetBackupMode sets the BackupMode field's value.
func (s *CreateBackupInput) SetBackupMode(v string) *CreateBackupInput {
	s.BackupMode = &v
	return s
}

// SetBackupStrategy sets the BackupStrategy field's value.
func (s *CreateBackupInput) SetBackupStrategy(v string) *CreateBackupInput {
	s.BackupStrategy = &v
	return s
}

// SetBackupType sets the BackupType field's value.
func (s *CreateBackupInput) SetBackupType(v string) *CreateBackupInput {
	s.BackupType = &v
	return s
}

// SetDBNames sets the DBNames field's value.
func (s *CreateBackupInput) SetDBNames(v string) *CreateBackupInput {
	s.DBNames = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateBackupInput) SetInstanceId(v string) *CreateBackupInput {
	s.InstanceId = &v
	return s
}

type CreateBackupOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateBackupOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateBackupOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfBackupDataTypeForCreateBackupInputData is a EnumOfBackupDataTypeForCreateBackupInput enum value
	EnumOfBackupDataTypeForCreateBackupInputData = "Data"
)

const (
	// EnumOfBackupModeForCreateBackupInputFull is a EnumOfBackupModeForCreateBackupInput enum value
	EnumOfBackupModeForCreateBackupInputFull = "Full"

	// EnumOfBackupModeForCreateBackupInputIncrement is a EnumOfBackupModeForCreateBackupInput enum value
	EnumOfBackupModeForCreateBackupInputIncrement = "Increment"
)

const (
	// EnumOfBackupStrategyForCreateBackupInputDatabase is a EnumOfBackupStrategyForCreateBackupInput enum value
	EnumOfBackupStrategyForCreateBackupInputDatabase = "Database"

	// EnumOfBackupStrategyForCreateBackupInputInstance is a EnumOfBackupStrategyForCreateBackupInput enum value
	EnumOfBackupStrategyForCreateBackupInputInstance = "Instance"
)

const (
	// EnumOfBackupTypeForCreateBackupInputLogical is a EnumOfBackupTypeForCreateBackupInput enum value
	EnumOfBackupTypeForCreateBackupInputLogical = "Logical"

	// EnumOfBackupTypeForCreateBackupInputPhysical is a EnumOfBackupTypeForCreateBackupInput enum value
	EnumOfBackupTypeForCreateBackupInputPhysical = "Physical"
)
