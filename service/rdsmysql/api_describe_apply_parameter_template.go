// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysql

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeApplyParameterTemplateCommon = "DescribeApplyParameterTemplate"

// DescribeApplyParameterTemplateCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeApplyParameterTemplateCommon operation. The "output" return
// value will be populated with the DescribeApplyParameterTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeApplyParameterTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeApplyParameterTemplateCommon Send returns without error.
//
// See DescribeApplyParameterTemplateCommon for more information on using the DescribeApplyParameterTemplateCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeApplyParameterTemplateCommonRequest method.
//    req, resp := client.DescribeApplyParameterTemplateCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeApplyParameterTemplateCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeApplyParameterTemplateCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeApplyParameterTemplateCommon API operation for RDS_MYSQL.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL's
// API operation DescribeApplyParameterTemplateCommon for usage and error information.
func (c *RDSMYSQL) DescribeApplyParameterTemplateCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeApplyParameterTemplateCommonRequest(input)
	return out, req.Send()
}

// DescribeApplyParameterTemplateCommonWithContext is the same as DescribeApplyParameterTemplateCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeApplyParameterTemplateCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeApplyParameterTemplateCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeApplyParameterTemplateCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeApplyParameterTemplate = "DescribeApplyParameterTemplate"

// DescribeApplyParameterTemplateRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeApplyParameterTemplate operation. The "output" return
// value will be populated with the DescribeApplyParameterTemplateCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeApplyParameterTemplateCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeApplyParameterTemplateCommon Send returns without error.
//
// See DescribeApplyParameterTemplate for more information on using the DescribeApplyParameterTemplate
// API call, and error handling.
//
//    // Example sending a request using the DescribeApplyParameterTemplateRequest method.
//    req, resp := client.DescribeApplyParameterTemplateRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQL) DescribeApplyParameterTemplateRequest(input *DescribeApplyParameterTemplateInput) (req *request.Request, output *DescribeApplyParameterTemplateOutput) {
	op := &request.Operation{
		Name:       opDescribeApplyParameterTemplate,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeApplyParameterTemplateInput{}
	}

	output = &DescribeApplyParameterTemplateOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeApplyParameterTemplate API operation for RDS_MYSQL.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL's
// API operation DescribeApplyParameterTemplate for usage and error information.
func (c *RDSMYSQL) DescribeApplyParameterTemplate(input *DescribeApplyParameterTemplateInput) (*DescribeApplyParameterTemplateOutput, error) {
	req, out := c.DescribeApplyParameterTemplateRequest(input)
	return out, req.Send()
}

// DescribeApplyParameterTemplateWithContext is the same as DescribeApplyParameterTemplate with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeApplyParameterTemplate for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQL) DescribeApplyParameterTemplateWithContext(ctx volcengine.Context, input *DescribeApplyParameterTemplateInput, opts ...request.Option) (*DescribeApplyParameterTemplateOutput, error) {
	req, out := c.DescribeApplyParameterTemplateRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeApplyParameterTemplateInput struct {
	_ struct{} `type:"structure"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// TemplateId is a required field
	TemplateId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeApplyParameterTemplateInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeApplyParameterTemplateInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeApplyParameterTemplateInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeApplyParameterTemplateInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.TemplateId == nil {
		invalidParams.Add(request.NewErrParamRequired("TemplateId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeApplyParameterTemplateInput) SetInstanceId(v string) *DescribeApplyParameterTemplateInput {
	s.InstanceId = &v
	return s
}

// SetTemplateId sets the TemplateId field's value.
func (s *DescribeApplyParameterTemplateInput) SetTemplateId(v string) *DescribeApplyParameterTemplateInput {
	s.TemplateId = &v
	return s
}

type DescribeApplyParameterTemplateOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	InstanceId *string `type:"string"`

	Parameters []*ParameterForDescribeApplyParameterTemplateOutput `type:"list"`

	TemplateId *string `type:"string"`
}

// String returns the string representation
func (s DescribeApplyParameterTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeApplyParameterTemplateOutput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeApplyParameterTemplateOutput) SetInstanceId(v string) *DescribeApplyParameterTemplateOutput {
	s.InstanceId = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *DescribeApplyParameterTemplateOutput) SetParameters(v []*ParameterForDescribeApplyParameterTemplateOutput) *DescribeApplyParameterTemplateOutput {
	s.Parameters = v
	return s
}

// SetTemplateId sets the TemplateId field's value.
func (s *DescribeApplyParameterTemplateOutput) SetTemplateId(v string) *DescribeApplyParameterTemplateOutput {
	s.TemplateId = &v
	return s
}

type ParameterForDescribeApplyParameterTemplateOutput struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	NewValue *string `type:"string"`

	OldValue *string `type:"string"`

	Restart *bool `type:"boolean"`

	Result *string `type:"string"`
}

// String returns the string representation
func (s ParameterForDescribeApplyParameterTemplateOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ParameterForDescribeApplyParameterTemplateOutput) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *ParameterForDescribeApplyParameterTemplateOutput) SetName(v string) *ParameterForDescribeApplyParameterTemplateOutput {
	s.Name = &v
	return s
}

// SetNewValue sets the NewValue field's value.
func (s *ParameterForDescribeApplyParameterTemplateOutput) SetNewValue(v string) *ParameterForDescribeApplyParameterTemplateOutput {
	s.NewValue = &v
	return s
}

// SetOldValue sets the OldValue field's value.
func (s *ParameterForDescribeApplyParameterTemplateOutput) SetOldValue(v string) *ParameterForDescribeApplyParameterTemplateOutput {
	s.OldValue = &v
	return s
}

// SetRestart sets the Restart field's value.
func (s *ParameterForDescribeApplyParameterTemplateOutput) SetRestart(v bool) *ParameterForDescribeApplyParameterTemplateOutput {
	s.Restart = &v
	return s
}

// SetResult sets the Result field's value.
func (s *ParameterForDescribeApplyParameterTemplateOutput) SetResult(v string) *ParameterForDescribeApplyParameterTemplateOutput {
	s.Result = &v
	return s
}
