// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package cr

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opUpdatePublicEndpointCommon = "UpdatePublicEndpoint"

// UpdatePublicEndpointCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePublicEndpointCommon operation. The "output" return
// value will be populated with the UpdatePublicEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePublicEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePublicEndpointCommon Send returns without error.
//
// See UpdatePublicEndpointCommon for more information on using the UpdatePublicEndpointCommon
// API call, and error handling.
//
//    // Example sending a request using the UpdatePublicEndpointCommonRequest method.
//    req, resp := client.UpdatePublicEndpointCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CR) UpdatePublicEndpointCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opUpdatePublicEndpointCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePublicEndpointCommon API operation for CR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CR's
// API operation UpdatePublicEndpointCommon for usage and error information.
func (c *CR) UpdatePublicEndpointCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.UpdatePublicEndpointCommonRequest(input)
	return out, req.Send()
}

// UpdatePublicEndpointCommonWithContext is the same as UpdatePublicEndpointCommon with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePublicEndpointCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CR) UpdatePublicEndpointCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.UpdatePublicEndpointCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opUpdatePublicEndpoint = "UpdatePublicEndpoint"

// UpdatePublicEndpointRequest generates a "volcengine/request.Request" representing the
// client's request for the UpdatePublicEndpoint operation. The "output" return
// value will be populated with the UpdatePublicEndpointCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned UpdatePublicEndpointCommon Request to send the API call to the service.
// the "output" return value is not valid until after UpdatePublicEndpointCommon Send returns without error.
//
// See UpdatePublicEndpoint for more information on using the UpdatePublicEndpoint
// API call, and error handling.
//
//    // Example sending a request using the UpdatePublicEndpointRequest method.
//    req, resp := client.UpdatePublicEndpointRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *CR) UpdatePublicEndpointRequest(input *UpdatePublicEndpointInput) (req *request.Request, output *UpdatePublicEndpointOutput) {
	op := &request.Operation{
		Name:       opUpdatePublicEndpoint,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &UpdatePublicEndpointInput{}
	}

	output = &UpdatePublicEndpointOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// UpdatePublicEndpoint API operation for CR.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CR's
// API operation UpdatePublicEndpoint for usage and error information.
func (c *CR) UpdatePublicEndpoint(input *UpdatePublicEndpointInput) (*UpdatePublicEndpointOutput, error) {
	req, out := c.UpdatePublicEndpointRequest(input)
	return out, req.Send()
}

// UpdatePublicEndpointWithContext is the same as UpdatePublicEndpoint with the addition of
// the ability to pass a context and additional request options.
//
// See UpdatePublicEndpoint for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CR) UpdatePublicEndpointWithContext(ctx volcengine.Context, input *UpdatePublicEndpointInput, opts ...request.Option) (*UpdatePublicEndpointOutput, error) {
	req, out := c.UpdatePublicEndpointRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type UpdatePublicEndpointInput struct {
	_ struct{} `type:"structure"`

	Enabled *bool `type:"boolean"`

	Registry *string `type:"string"`
}

// String returns the string representation
func (s UpdatePublicEndpointInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePublicEndpointInput) GoString() string {
	return s.String()
}

// SetEnabled sets the Enabled field's value.
func (s *UpdatePublicEndpointInput) SetEnabled(v bool) *UpdatePublicEndpointInput {
	s.Enabled = &v
	return s
}

// SetRegistry sets the Registry field's value.
func (s *UpdatePublicEndpointInput) SetRegistry(v string) *UpdatePublicEndpointInput {
	s.Registry = &v
	return s
}

type UpdatePublicEndpointOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s UpdatePublicEndpointOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s UpdatePublicEndpointOutput) GoString() string {
	return s.String()
}
