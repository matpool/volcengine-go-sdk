// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package storageebs

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opTerminateVolumesCommon = "TerminateVolumes"

// TerminateVolumesCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the TerminateVolumesCommon operation. The "output" return
// value will be populated with the TerminateVolumesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TerminateVolumesCommon Request to send the API call to the service.
// the "output" return value is not valid until after TerminateVolumesCommon Send returns without error.
//
// See TerminateVolumesCommon for more information on using the TerminateVolumesCommon
// API call, and error handling.
//
//	// Example sending a request using the TerminateVolumesCommonRequest method.
//	req, resp := client.TerminateVolumesCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *STORAGEEBS) TerminateVolumesCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opTerminateVolumesCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// TerminateVolumesCommon API operation for STORAGE_EBS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for STORAGE_EBS's
// API operation TerminateVolumesCommon for usage and error information.
func (c *STORAGEEBS) TerminateVolumesCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.TerminateVolumesCommonRequest(input)
	return out, req.Send()
}

// TerminateVolumesCommonWithContext is the same as TerminateVolumesCommon with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateVolumesCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) TerminateVolumesCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.TerminateVolumesCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opTerminateVolumes = "TerminateVolumes"

// TerminateVolumesRequest generates a "volcengine/request.Request" representing the
// client's request for the TerminateVolumes operation. The "output" return
// value will be populated with the TerminateVolumesCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned TerminateVolumesCommon Request to send the API call to the service.
// the "output" return value is not valid until after TerminateVolumesCommon Send returns without error.
//
// See TerminateVolumes for more information on using the TerminateVolumes
// API call, and error handling.
//
//	// Example sending a request using the TerminateVolumesRequest method.
//	req, resp := client.TerminateVolumesRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *STORAGEEBS) TerminateVolumesRequest(input *TerminateVolumesInput) (req *request.Request, output *TerminateVolumesOutput) {
	op := &request.Operation{
		Name:       opTerminateVolumes,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &TerminateVolumesInput{}
	}

	output = &TerminateVolumesOutput{}
	req = c.newRequest(op, input, output)

	return
}

// TerminateVolumes API operation for STORAGE_EBS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for STORAGE_EBS's
// API operation TerminateVolumes for usage and error information.
func (c *STORAGEEBS) TerminateVolumes(input *TerminateVolumesInput) (*TerminateVolumesOutput, error) {
	req, out := c.TerminateVolumesRequest(input)
	return out, req.Send()
}

// TerminateVolumesWithContext is the same as TerminateVolumes with the addition of
// the ability to pass a context and additional request options.
//
// See TerminateVolumes for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *STORAGEEBS) TerminateVolumesWithContext(ctx volcengine.Context, input *TerminateVolumesInput, opts ...request.Option) (*TerminateVolumesOutput, error) {
	req, out := c.TerminateVolumesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type TerminateVolumesInput struct {
	_ struct{} `type:"structure"`

	VolumeIds []*string `type:"list"`
}

// String returns the string representation
func (s TerminateVolumesInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateVolumesInput) GoString() string {
	return s.String()
}

// SetVolumeIds sets the VolumeIds field's value.
func (s *TerminateVolumesInput) SetVolumeIds(v []*string) *TerminateVolumesInput {
	s.VolumeIds = v
	return s
}

type TerminateVolumesOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Number *string `type:"string"`
}

// String returns the string representation
func (s TerminateVolumesOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s TerminateVolumesOutput) GoString() string {
	return s.String()
}

// SetNumber sets the Number field's value.
func (s *TerminateVolumesOutput) SetNumber(v string) *TerminateVolumesOutput {
	s.Number = &v
	return s
}
