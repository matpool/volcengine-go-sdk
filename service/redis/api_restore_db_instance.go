// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRestoreDBInstanceCommon = "RestoreDBInstance"

// RestoreDBInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RestoreDBInstanceCommon operation. The "output" return
// value will be populated with the RestoreDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreDBInstanceCommon Send returns without error.
//
// See RestoreDBInstanceCommon for more information on using the RestoreDBInstanceCommon
// API call, and error handling.
//
//    // Example sending a request using the RestoreDBInstanceCommonRequest method.
//    req, resp := client.RestoreDBInstanceCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) RestoreDBInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRestoreDBInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreDBInstanceCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation RestoreDBInstanceCommon for usage and error information.
func (c *REDIS) RestoreDBInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RestoreDBInstanceCommonRequest(input)
	return out, req.Send()
}

// RestoreDBInstanceCommonWithContext is the same as RestoreDBInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreDBInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) RestoreDBInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RestoreDBInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreDBInstance = "RestoreDBInstance"

// RestoreDBInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the RestoreDBInstance operation. The "output" return
// value will be populated with the RestoreDBInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RestoreDBInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RestoreDBInstanceCommon Send returns without error.
//
// See RestoreDBInstance for more information on using the RestoreDBInstance
// API call, and error handling.
//
//    // Example sending a request using the RestoreDBInstanceRequest method.
//    req, resp := client.RestoreDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) RestoreDBInstanceRequest(input *RestoreDBInstanceInput) (req *request.Request, output *RestoreDBInstanceOutput) {
	op := &request.Operation{
		Name:       opRestoreDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestoreDBInstanceInput{}
	}

	output = &RestoreDBInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RestoreDBInstance API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation RestoreDBInstance for usage and error information.
func (c *REDIS) RestoreDBInstance(input *RestoreDBInstanceInput) (*RestoreDBInstanceOutput, error) {
	req, out := c.RestoreDBInstanceRequest(input)
	return out, req.Send()
}

// RestoreDBInstanceWithContext is the same as RestoreDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) RestoreDBInstanceWithContext(ctx volcengine.Context, input *RestoreDBInstanceInput, opts ...request.Option) (*RestoreDBInstanceOutput, error) {
	req, out := c.RestoreDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RestoreDBInstanceInput struct {
	_ struct{} `type:"structure"`

	BackupType *string `type:"string" enum:"EnumOfBackupTypeForRestoreDBInstanceInput"`

	InstanceId *string `type:"string"`

	TimePoint *string `type:"string"`
}

// String returns the string representation
func (s RestoreDBInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDBInstanceInput) GoString() string {
	return s.String()
}

// SetBackupType sets the BackupType field's value.
func (s *RestoreDBInstanceInput) SetBackupType(v string) *RestoreDBInstanceInput {
	s.BackupType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *RestoreDBInstanceInput) SetInstanceId(v string) *RestoreDBInstanceInput {
	s.InstanceId = &v
	return s
}

// SetTimePoint sets the TimePoint field's value.
func (s *RestoreDBInstanceInput) SetTimePoint(v string) *RestoreDBInstanceInput {
	s.TimePoint = &v
	return s
}

type RestoreDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s RestoreDBInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDBInstanceOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfBackupTypeForRestoreDBInstanceInputAll is a EnumOfBackupTypeForRestoreDBInstanceInput enum value
	EnumOfBackupTypeForRestoreDBInstanceInputAll = "All"

	// EnumOfBackupTypeForRestoreDBInstanceInputFull is a EnumOfBackupTypeForRestoreDBInstanceInput enum value
	EnumOfBackupTypeForRestoreDBInstanceInputFull = "Full"

	// EnumOfBackupTypeForRestoreDBInstanceInputInc is a EnumOfBackupTypeForRestoreDBInstanceInput enum value
	EnumOfBackupTypeForRestoreDBInstanceInputInc = "Inc"

	// EnumOfBackupTypeForRestoreDBInstanceInputInvalid is a EnumOfBackupTypeForRestoreDBInstanceInput enum value
	EnumOfBackupTypeForRestoreDBInstanceInputInvalid = "Invalid"
)
