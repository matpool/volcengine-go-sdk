// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeBackupPlanCommon = "DescribeBackupPlan"

// DescribeBackupPlanCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeBackupPlanCommon operation. The "output" return
// value will be populated with the DescribeBackupPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPlanCommon Send returns without error.
//
// See DescribeBackupPlanCommon for more information on using the DescribeBackupPlanCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupPlanCommonRequest method.
//    req, resp := client.DescribeBackupPlanCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeBackupPlanCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeBackupPlanCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPlanCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeBackupPlanCommon for usage and error information.
func (c *REDIS) DescribeBackupPlanCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPlanCommonRequest(input)
	return out, req.Send()
}

// DescribeBackupPlanCommonWithContext is the same as DescribeBackupPlanCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPlanCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeBackupPlanCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeBackupPlanCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeBackupPlan = "DescribeBackupPlan"

// DescribeBackupPlanRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeBackupPlan operation. The "output" return
// value will be populated with the DescribeBackupPlanCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeBackupPlanCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeBackupPlanCommon Send returns without error.
//
// See DescribeBackupPlan for more information on using the DescribeBackupPlan
// API call, and error handling.
//
//    // Example sending a request using the DescribeBackupPlanRequest method.
//    req, resp := client.DescribeBackupPlanRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeBackupPlanRequest(input *DescribeBackupPlanInput) (req *request.Request, output *DescribeBackupPlanOutput) {
	op := &request.Operation{
		Name:       opDescribeBackupPlan,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeBackupPlanInput{}
	}

	output = &DescribeBackupPlanOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeBackupPlan API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeBackupPlan for usage and error information.
func (c *REDIS) DescribeBackupPlan(input *DescribeBackupPlanInput) (*DescribeBackupPlanOutput, error) {
	req, out := c.DescribeBackupPlanRequest(input)
	return out, req.Send()
}

// DescribeBackupPlanWithContext is the same as DescribeBackupPlan with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeBackupPlan for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeBackupPlanWithContext(ctx volcengine.Context, input *DescribeBackupPlanInput, opts ...request.Option) (*DescribeBackupPlanOutput, error) {
	req, out := c.DescribeBackupPlanRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeBackupPlanInput struct {
	_ struct{} `type:"structure"`

	InstanceId *string `type:"string"`
}

// String returns the string representation
func (s DescribeBackupPlanInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPlanInput) GoString() string {
	return s.String()
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeBackupPlanInput) SetInstanceId(v string) *DescribeBackupPlanInput {
	s.InstanceId = &v
	return s
}

type DescribeBackupPlanOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s DescribeBackupPlanOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeBackupPlanOutput) GoString() string {
	return s.String()
}
