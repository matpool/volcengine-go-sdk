// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDBAccountCommon = "ModifyDBAccount"

// ModifyDBAccountCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBAccountCommon operation. The "output" return
// value will be populated with the ModifyDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBAccountCommon Send returns without error.
//
// See ModifyDBAccountCommon for more information on using the ModifyDBAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBAccountCommonRequest method.
//    req, resp := client.ModifyDBAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) ModifyDBAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBAccountCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation ModifyDBAccountCommon for usage and error information.
func (c *REDIS) ModifyDBAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBAccountCommonRequest(input)
	return out, req.Send()
}

// ModifyDBAccountCommonWithContext is the same as ModifyDBAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) ModifyDBAccountCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBAccount = "ModifyDBAccount"

// ModifyDBAccountRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBAccount operation. The "output" return
// value will be populated with the ModifyDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBAccountCommon Send returns without error.
//
// See ModifyDBAccount for more information on using the ModifyDBAccount
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBAccountRequest method.
//    req, resp := client.ModifyDBAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) ModifyDBAccountRequest(input *ModifyDBAccountInput) (req *request.Request, output *ModifyDBAccountOutput) {
	op := &request.Operation{
		Name:       opModifyDBAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBAccountInput{}
	}

	output = &ModifyDBAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBAccount API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation ModifyDBAccount for usage and error information.
func (c *REDIS) ModifyDBAccount(input *ModifyDBAccountInput) (*ModifyDBAccountOutput, error) {
	req, out := c.ModifyDBAccountRequest(input)
	return out, req.Send()
}

// ModifyDBAccountWithContext is the same as ModifyDBAccount with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) ModifyDBAccountWithContext(ctx volcengine.Context, input *ModifyDBAccountInput, opts ...request.Option) (*ModifyDBAccountOutput, error) {
	req, out := c.ModifyDBAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBAccountInput struct {
	_ struct{} `type:"structure"`

	// AccountName is a required field
	AccountName *string `type:"string" required:"true"`

	ClientToken *string `type:"string"`

	Description *string `type:"string"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	Password *string `type:"string"`

	RoleName *string `type:"string"`
}

// String returns the string representation
func (s ModifyDBAccountInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBAccountInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBAccountInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBAccountInput"}
	if s.AccountName == nil {
		invalidParams.Add(request.NewErrParamRequired("AccountName"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountName sets the AccountName field's value.
func (s *ModifyDBAccountInput) SetAccountName(v string) *ModifyDBAccountInput {
	s.AccountName = &v
	return s
}

// SetClientToken sets the ClientToken field's value.
func (s *ModifyDBAccountInput) SetClientToken(v string) *ModifyDBAccountInput {
	s.ClientToken = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *ModifyDBAccountInput) SetDescription(v string) *ModifyDBAccountInput {
	s.Description = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBAccountInput) SetInstanceId(v string) *ModifyDBAccountInput {
	s.InstanceId = &v
	return s
}

// SetPassword sets the Password field's value.
func (s *ModifyDBAccountInput) SetPassword(v string) *ModifyDBAccountInput {
	s.Password = &v
	return s
}

// SetRoleName sets the RoleName field's value.
func (s *ModifyDBAccountInput) SetRoleName(v string) *ModifyDBAccountInput {
	s.RoleName = &v
	return s
}

type ModifyDBAccountOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBAccountOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBAccountOutput) GoString() string {
	return s.String()
}
