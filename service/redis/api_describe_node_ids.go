// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package redis

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDescribeNodeIdsCommon = "DescribeNodeIds"

// DescribeNodeIdsCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNodeIdsCommon operation. The "output" return
// value will be populated with the DescribeNodeIdsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNodeIdsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNodeIdsCommon Send returns without error.
//
// See DescribeNodeIdsCommon for more information on using the DescribeNodeIdsCommon
// API call, and error handling.
//
//    // Example sending a request using the DescribeNodeIdsCommonRequest method.
//    req, resp := client.DescribeNodeIdsCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeNodeIdsCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDescribeNodeIdsCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeNodeIdsCommon API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeNodeIdsCommon for usage and error information.
func (c *REDIS) DescribeNodeIdsCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DescribeNodeIdsCommonRequest(input)
	return out, req.Send()
}

// DescribeNodeIdsCommonWithContext is the same as DescribeNodeIdsCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNodeIdsCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeNodeIdsCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DescribeNodeIdsCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNodeIds = "DescribeNodeIds"

// DescribeNodeIdsRequest generates a "volcengine/request.Request" representing the
// client's request for the DescribeNodeIds operation. The "output" return
// value will be populated with the DescribeNodeIdsCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DescribeNodeIdsCommon Request to send the API call to the service.
// the "output" return value is not valid until after DescribeNodeIdsCommon Send returns without error.
//
// See DescribeNodeIds for more information on using the DescribeNodeIds
// API call, and error handling.
//
//    // Example sending a request using the DescribeNodeIdsRequest method.
//    req, resp := client.DescribeNodeIdsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *REDIS) DescribeNodeIdsRequest(input *DescribeNodeIdsInput) (req *request.Request, output *DescribeNodeIdsOutput) {
	op := &request.Operation{
		Name:       opDescribeNodeIds,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNodeIdsInput{}
	}

	output = &DescribeNodeIdsOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DescribeNodeIds API operation for REDIS.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for REDIS's
// API operation DescribeNodeIds for usage and error information.
func (c *REDIS) DescribeNodeIds(input *DescribeNodeIdsInput) (*DescribeNodeIdsOutput, error) {
	req, out := c.DescribeNodeIdsRequest(input)
	return out, req.Send()
}

// DescribeNodeIdsWithContext is the same as DescribeNodeIds with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNodeIds for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *REDIS) DescribeNodeIdsWithContext(ctx volcengine.Context, input *DescribeNodeIdsInput, opts ...request.Option) (*DescribeNodeIdsOutput, error) {
	req, out := c.DescribeNodeIdsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DescribeNodeIdsInput struct {
	_ struct{} `type:"structure"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DescribeNodeIdsInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNodeIdsInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DescribeNodeIdsInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DescribeNodeIdsInput"}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetInstanceId sets the InstanceId field's value.
func (s *DescribeNodeIdsInput) SetInstanceId(v string) *DescribeNodeIdsInput {
	s.InstanceId = &v
	return s
}

type DescribeNodeIdsOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	NodeIds []*string `type:"list"`
}

// String returns the string representation
func (s DescribeNodeIdsOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNodeIdsOutput) GoString() string {
	return s.String()
}

// SetNodeIds sets the NodeIds field's value.
func (s *DescribeNodeIdsOutput) SetNodeIds(v []*string) *DescribeNodeIdsOutput {
	s.NodeIds = v
	return s
}
