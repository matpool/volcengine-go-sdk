// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteProjectCommon = "deleteProject"

// DeleteProjectCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteProjectCommon operation. The "output" return
// value will be populated with the DeleteProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteProjectCommon Send returns without error.
//
// See DeleteProjectCommon for more information on using the DeleteProjectCommon
// API call, and error handling.
//
//	// Example sending a request using the DeleteProjectCommonRequest method.
//	req, resp := client.DeleteProjectCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *SPARK) DeleteProjectCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteProjectCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteProjectCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation DeleteProjectCommon for usage and error information.
func (c *SPARK) DeleteProjectCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteProjectCommonRequest(input)
	return out, req.Send()
}

// DeleteProjectCommonWithContext is the same as DeleteProjectCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteProjectCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) DeleteProjectCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteProjectCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteProject = "deleteProject"

// DeleteProjectRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteProject operation. The "output" return
// value will be populated with the DeleteProjectCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteProjectCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteProjectCommon Send returns without error.
//
// See DeleteProject for more information on using the DeleteProject
// API call, and error handling.
//
//	// Example sending a request using the DeleteProjectRequest method.
//	req, resp := client.DeleteProjectRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *SPARK) DeleteProjectRequest(input *DeleteProjectInput) (req *request.Request, output *DeleteProjectOutput) {
	op := &request.Operation{
		Name:       opDeleteProject,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteProjectInput{}
	}

	output = &DeleteProjectOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// DeleteProject API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation DeleteProject for usage and error information.
func (c *SPARK) DeleteProject(input *DeleteProjectInput) (*DeleteProjectOutput, error) {
	req, out := c.DeleteProjectRequest(input)
	return out, req.Send()
}

// DeleteProjectWithContext is the same as DeleteProject with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteProject for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) DeleteProjectWithContext(ctx volcengine.Context, input *DeleteProjectInput, opts ...request.Option) (*DeleteProjectOutput, error) {
	req, out := c.DeleteProjectRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteProjectInput struct {
	_ struct{} `type:"structure"`

	ProjectId *string `type:"string"`
}

// String returns the string representation
func (s DeleteProjectInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteProjectInput) GoString() string {
	return s.String()
}

// SetProjectId sets the ProjectId field's value.
func (s *DeleteProjectInput) SetProjectId(v string) *DeleteProjectInput {
	s.ProjectId = &v
	return s
}

type DeleteProjectOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Message *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DeleteProjectOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteProjectOutput) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DeleteProjectOutput) SetMessage(v string) *DeleteProjectOutput {
	s.Message = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DeleteProjectOutput) SetStatus(v string) *DeleteProjectOutput {
	s.Status = &v
	return s
}
