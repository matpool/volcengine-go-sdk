// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package spark

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opListZoneCommon = "listZone"

// ListZoneCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ListZoneCommon operation. The "output" return
// value will be populated with the ListZoneCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListZoneCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListZoneCommon Send returns without error.
//
// See ListZoneCommon for more information on using the ListZoneCommon
// API call, and error handling.
//
//	// Example sending a request using the ListZoneCommonRequest method.
//	req, resp := client.ListZoneCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *SPARK) ListZoneCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opListZoneCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// ListZoneCommon API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation ListZoneCommon for usage and error information.
func (c *SPARK) ListZoneCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ListZoneCommonRequest(input)
	return out, req.Send()
}

// ListZoneCommonWithContext is the same as ListZoneCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ListZoneCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) ListZoneCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ListZoneCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opListZone = "listZone"

// ListZoneRequest generates a "volcengine/request.Request" representing the
// client's request for the ListZone operation. The "output" return
// value will be populated with the ListZoneCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ListZoneCommon Request to send the API call to the service.
// the "output" return value is not valid until after ListZoneCommon Send returns without error.
//
// See ListZone for more information on using the ListZone
// API call, and error handling.
//
//	// Example sending a request using the ListZoneRequest method.
//	req, resp := client.ListZoneRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *SPARK) ListZoneRequest(input *ListZoneInput) (req *request.Request, output *ListZoneOutput) {
	op := &request.Operation{
		Name:       opListZone,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ListZoneInput{}
	}

	output = &ListZoneOutput{}
	req = c.newRequest(op, input, output)

	return
}

// ListZone API operation for SPARK.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for SPARK's
// API operation ListZone for usage and error information.
func (c *SPARK) ListZone(input *ListZoneInput) (*ListZoneOutput, error) {
	req, out := c.ListZoneRequest(input)
	return out, req.Send()
}

// ListZoneWithContext is the same as ListZone with the addition of
// the ability to pass a context and additional request options.
//
// See ListZone for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *SPARK) ListZoneWithContext(ctx volcengine.Context, input *ListZoneInput, opts ...request.Option) (*ListZoneOutput, error) {
	req, out := c.ListZoneRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DataListForlistZoneOutput struct {
	_ struct{} `type:"structure"`

	RegionId *string `type:"string"`

	ZoneId *string `type:"string"`

	ZoneName *string `type:"string"`

	ZoneStatus *string `type:"string"`
}

// String returns the string representation
func (s DataListForlistZoneOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DataListForlistZoneOutput) GoString() string {
	return s.String()
}

// SetRegionId sets the RegionId field's value.
func (s *DataListForlistZoneOutput) SetRegionId(v string) *DataListForlistZoneOutput {
	s.RegionId = &v
	return s
}

// SetZoneId sets the ZoneId field's value.
func (s *DataListForlistZoneOutput) SetZoneId(v string) *DataListForlistZoneOutput {
	s.ZoneId = &v
	return s
}

// SetZoneName sets the ZoneName field's value.
func (s *DataListForlistZoneOutput) SetZoneName(v string) *DataListForlistZoneOutput {
	s.ZoneName = &v
	return s
}

// SetZoneStatus sets the ZoneStatus field's value.
func (s *DataListForlistZoneOutput) SetZoneStatus(v string) *DataListForlistZoneOutput {
	s.ZoneStatus = &v
	return s
}

type ListZoneInput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s ListZoneInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListZoneInput) GoString() string {
	return s.String()
}

type ListZoneOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	DataList []*DataListForlistZoneOutput `type:"list"`
}

// String returns the string representation
func (s ListZoneOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ListZoneOutput) GoString() string {
	return s.String()
}

// SetDataList sets the DataList field's value.
func (s *ListZoneOutput) SetDataList(v []*DataListForlistZoneOutput) *ListZoneOutput {
	s.DataList = v
	return s
}
