// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package vke

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateKubeconfigCommon = "CreateKubeconfig"

// CreateKubeconfigCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateKubeconfigCommon operation. The "output" return
// value will be populated with the CreateKubeconfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateKubeconfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateKubeconfigCommon Send returns without error.
//
// See CreateKubeconfigCommon for more information on using the CreateKubeconfigCommon
// API call, and error handling.
//
//	// Example sending a request using the CreateKubeconfigCommonRequest method.
//	req, resp := client.CreateKubeconfigCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *VKE) CreateKubeconfigCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateKubeconfigCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateKubeconfigCommon API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation CreateKubeconfigCommon for usage and error information.
func (c *VKE) CreateKubeconfigCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateKubeconfigCommonRequest(input)
	return out, req.Send()
}

// CreateKubeconfigCommonWithContext is the same as CreateKubeconfigCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateKubeconfigCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) CreateKubeconfigCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateKubeconfigCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateKubeconfig = "CreateKubeconfig"

// CreateKubeconfigRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateKubeconfig operation. The "output" return
// value will be populated with the CreateKubeconfigCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateKubeconfigCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateKubeconfigCommon Send returns without error.
//
// See CreateKubeconfig for more information on using the CreateKubeconfig
// API call, and error handling.
//
//	// Example sending a request using the CreateKubeconfigRequest method.
//	req, resp := client.CreateKubeconfigRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *VKE) CreateKubeconfigRequest(input *CreateKubeconfigInput) (req *request.Request, output *CreateKubeconfigOutput) {
	op := &request.Operation{
		Name:       opCreateKubeconfig,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateKubeconfigInput{}
	}

	output = &CreateKubeconfigOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateKubeconfig API operation for VKE.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for VKE's
// API operation CreateKubeconfig for usage and error information.
func (c *VKE) CreateKubeconfig(input *CreateKubeconfigInput) (*CreateKubeconfigOutput, error) {
	req, out := c.CreateKubeconfigRequest(input)
	return out, req.Send()
}

// CreateKubeconfigWithContext is the same as CreateKubeconfig with the addition of
// the ability to pass a context and additional request options.
//
// See CreateKubeconfig for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *VKE) CreateKubeconfigWithContext(ctx volcengine.Context, input *CreateKubeconfigInput, opts ...request.Option) (*CreateKubeconfigOutput, error) {
	req, out := c.CreateKubeconfigRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type CreateKubeconfigInput struct {
	_ struct{} `type:"structure"`

	ClusterId *string `type:"string"`

	Type *string `type:"string" enum:"EnumOfTypeForCreateKubeconfigInput"`

	ValidDuration *int32 `type:"int32"`
}

// String returns the string representation
func (s CreateKubeconfigInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateKubeconfigInput) GoString() string {
	return s.String()
}

// SetClusterId sets the ClusterId field's value.
func (s *CreateKubeconfigInput) SetClusterId(v string) *CreateKubeconfigInput {
	s.ClusterId = &v
	return s
}

// SetType sets the Type field's value.
func (s *CreateKubeconfigInput) SetType(v string) *CreateKubeconfigInput {
	s.Type = &v
	return s
}

// SetValidDuration sets the ValidDuration field's value.
func (s *CreateKubeconfigInput) SetValidDuration(v int32) *CreateKubeconfigInput {
	s.ValidDuration = &v
	return s
}

type CreateKubeconfigOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string"`
}

// String returns the string representation
func (s CreateKubeconfigOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateKubeconfigOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *CreateKubeconfigOutput) SetId(v string) *CreateKubeconfigOutput {
	s.Id = &v
	return s
}

const (
	// EnumOfTypeForCreateKubeconfigInputPrivate is a EnumOfTypeForCreateKubeconfigInput enum value
	EnumOfTypeForCreateKubeconfigInputPrivate = "Private"

	// EnumOfTypeForCreateKubeconfigInputPublic is a EnumOfTypeForCreateKubeconfigInput enum value
	EnumOfTypeForCreateKubeconfigInputPublic = "Public"

	// EnumOfTypeForCreateKubeconfigInputTargetCluster is a EnumOfTypeForCreateKubeconfigInput enum value
	EnumOfTypeForCreateKubeconfigInputTargetCluster = "TargetCluster"
)
