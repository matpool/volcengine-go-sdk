// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package mlplatform

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opRebootDevInstanceCommon = "RebootDevInstance"

// RebootDevInstanceCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the RebootDevInstanceCommon operation. The "output" return
// value will be populated with the RebootDevInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RebootDevInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RebootDevInstanceCommon Send returns without error.
//
// See RebootDevInstanceCommon for more information on using the RebootDevInstanceCommon
// API call, and error handling.
//
//	// Example sending a request using the RebootDevInstanceCommonRequest method.
//	req, resp := client.RebootDevInstanceCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *MLPLATFORM) RebootDevInstanceCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opRebootDevInstanceCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RebootDevInstanceCommon API operation for ML_PLATFORM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ML_PLATFORM's
// API operation RebootDevInstanceCommon for usage and error information.
func (c *MLPLATFORM) RebootDevInstanceCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.RebootDevInstanceCommonRequest(input)
	return out, req.Send()
}

// RebootDevInstanceCommonWithContext is the same as RebootDevInstanceCommon with the addition of
// the ability to pass a context and additional request options.
//
// See RebootDevInstanceCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MLPLATFORM) RebootDevInstanceCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.RebootDevInstanceCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootDevInstance = "RebootDevInstance"

// RebootDevInstanceRequest generates a "volcengine/request.Request" representing the
// client's request for the RebootDevInstance operation. The "output" return
// value will be populated with the RebootDevInstanceCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned RebootDevInstanceCommon Request to send the API call to the service.
// the "output" return value is not valid until after RebootDevInstanceCommon Send returns without error.
//
// See RebootDevInstance for more information on using the RebootDevInstance
// API call, and error handling.
//
//	// Example sending a request using the RebootDevInstanceRequest method.
//	req, resp := client.RebootDevInstanceRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *MLPLATFORM) RebootDevInstanceRequest(input *RebootDevInstanceInput) (req *request.Request, output *RebootDevInstanceOutput) {
	op := &request.Operation{
		Name:       opRebootDevInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootDevInstanceInput{}
	}

	output = &RebootDevInstanceOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// RebootDevInstance API operation for ML_PLATFORM.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for ML_PLATFORM's
// API operation RebootDevInstance for usage and error information.
func (c *MLPLATFORM) RebootDevInstance(input *RebootDevInstanceInput) (*RebootDevInstanceOutput, error) {
	req, out := c.RebootDevInstanceRequest(input)
	return out, req.Send()
}

// RebootDevInstanceWithContext is the same as RebootDevInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RebootDevInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *MLPLATFORM) RebootDevInstanceWithContext(ctx volcengine.Context, input *RebootDevInstanceInput, opts ...request.Option) (*RebootDevInstanceOutput, error) {
	req, out := c.RebootDevInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type RebootDevInstanceInput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RebootDevInstanceInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootDevInstanceInput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *RebootDevInstanceInput) SetId(v string) *RebootDevInstanceInput {
	s.Id = &v
	return s
}

type RebootDevInstanceOutput struct {
	_ struct{} `type:"structure" json:",omitempty"`

	Metadata *response.ResponseMetadata

	Id *string `type:"string" json:",omitempty"`
}

// String returns the string representation
func (s RebootDevInstanceOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootDevInstanceOutput) GoString() string {
	return s.String()
}

// SetId sets the Id field's value.
func (s *RebootDevInstanceOutput) SetId(v string) *RebootDevInstanceOutput {
	s.Id = &v
	return s
}
