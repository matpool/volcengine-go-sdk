// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package natgateway

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opDeleteDnatEntryCommon = "DeleteDnatEntry"

// DeleteDnatEntryCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDnatEntryCommon operation. The "output" return
// value will be populated with the DeleteDnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDnatEntryCommon Send returns without error.
//
// See DeleteDnatEntryCommon for more information on using the DeleteDnatEntryCommon
// API call, and error handling.
//
//	// Example sending a request using the DeleteDnatEntryCommonRequest method.
//	req, resp := client.DeleteDnatEntryCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *NATGATEWAY) DeleteDnatEntryCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opDeleteDnatEntryCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDnatEntryCommon API operation for NATGATEWAY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NATGATEWAY's
// API operation DeleteDnatEntryCommon for usage and error information.
func (c *NATGATEWAY) DeleteDnatEntryCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.DeleteDnatEntryCommonRequest(input)
	return out, req.Send()
}

// DeleteDnatEntryCommonWithContext is the same as DeleteDnatEntryCommon with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDnatEntryCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteDnatEntryCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.DeleteDnatEntryCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDnatEntry = "DeleteDnatEntry"

// DeleteDnatEntryRequest generates a "volcengine/request.Request" representing the
// client's request for the DeleteDnatEntry operation. The "output" return
// value will be populated with the DeleteDnatEntryCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned DeleteDnatEntryCommon Request to send the API call to the service.
// the "output" return value is not valid until after DeleteDnatEntryCommon Send returns without error.
//
// See DeleteDnatEntry for more information on using the DeleteDnatEntry
// API call, and error handling.
//
//	// Example sending a request using the DeleteDnatEntryRequest method.
//	req, resp := client.DeleteDnatEntryRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *NATGATEWAY) DeleteDnatEntryRequest(input *DeleteDnatEntryInput) (req *request.Request, output *DeleteDnatEntryOutput) {
	op := &request.Operation{
		Name:       opDeleteDnatEntry,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDnatEntryInput{}
	}

	output = &DeleteDnatEntryOutput{}
	req = c.newRequest(op, input, output)

	return
}

// DeleteDnatEntry API operation for NATGATEWAY.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for NATGATEWAY's
// API operation DeleteDnatEntry for usage and error information.
func (c *NATGATEWAY) DeleteDnatEntry(input *DeleteDnatEntryInput) (*DeleteDnatEntryOutput, error) {
	req, out := c.DeleteDnatEntryRequest(input)
	return out, req.Send()
}

// DeleteDnatEntryWithContext is the same as DeleteDnatEntry with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDnatEntry for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *NATGATEWAY) DeleteDnatEntryWithContext(ctx volcengine.Context, input *DeleteDnatEntryInput, opts ...request.Option) (*DeleteDnatEntryOutput, error) {
	req, out := c.DeleteDnatEntryRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DeleteDnatEntryInput struct {
	_ struct{} `type:"structure"`

	// DnatEntryId is a required field
	DnatEntryId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s DeleteDnatEntryInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDnatEntryInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *DeleteDnatEntryInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "DeleteDnatEntryInput"}
	if s.DnatEntryId == nil {
		invalidParams.Add(request.NewErrParamRequired("DnatEntryId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDnatEntryId sets the DnatEntryId field's value.
func (s *DeleteDnatEntryInput) SetDnatEntryId(v string) *DeleteDnatEntryInput {
	s.DnatEntryId = &v
	return s
}

type DeleteDnatEntryOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s DeleteDnatEntryOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDnatEntryOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *DeleteDnatEntryOutput) SetRequestId(v string) *DeleteDnatEntryOutput {
	s.RequestId = &v
	return s
}
