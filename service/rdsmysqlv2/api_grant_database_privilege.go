// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opGrantDatabasePrivilegeCommon = "GrantDatabasePrivilege"

// GrantDatabasePrivilegeCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the GrantDatabasePrivilegeCommon operation. The "output" return
// value will be populated with the GrantDatabasePrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantDatabasePrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantDatabasePrivilegeCommon Send returns without error.
//
// See GrantDatabasePrivilegeCommon for more information on using the GrantDatabasePrivilegeCommon
// API call, and error handling.
//
//    // Example sending a request using the GrantDatabasePrivilegeCommonRequest method.
//    req, resp := client.GrantDatabasePrivilegeCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) GrantDatabasePrivilegeCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opGrantDatabasePrivilegeCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantDatabasePrivilegeCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation GrantDatabasePrivilegeCommon for usage and error information.
func (c *RDSMYSQLV2) GrantDatabasePrivilegeCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.GrantDatabasePrivilegeCommonRequest(input)
	return out, req.Send()
}

// GrantDatabasePrivilegeCommonWithContext is the same as GrantDatabasePrivilegeCommon with the addition of
// the ability to pass a context and additional request options.
//
// See GrantDatabasePrivilegeCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) GrantDatabasePrivilegeCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.GrantDatabasePrivilegeCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGrantDatabasePrivilege = "GrantDatabasePrivilege"

// GrantDatabasePrivilegeRequest generates a "volcengine/request.Request" representing the
// client's request for the GrantDatabasePrivilege operation. The "output" return
// value will be populated with the GrantDatabasePrivilegeCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned GrantDatabasePrivilegeCommon Request to send the API call to the service.
// the "output" return value is not valid until after GrantDatabasePrivilegeCommon Send returns without error.
//
// See GrantDatabasePrivilege for more information on using the GrantDatabasePrivilege
// API call, and error handling.
//
//    // Example sending a request using the GrantDatabasePrivilegeRequest method.
//    req, resp := client.GrantDatabasePrivilegeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) GrantDatabasePrivilegeRequest(input *GrantDatabasePrivilegeInput) (req *request.Request, output *GrantDatabasePrivilegeOutput) {
	op := &request.Operation{
		Name:       opGrantDatabasePrivilege,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GrantDatabasePrivilegeInput{}
	}

	output = &GrantDatabasePrivilegeOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// GrantDatabasePrivilege API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation GrantDatabasePrivilege for usage and error information.
func (c *RDSMYSQLV2) GrantDatabasePrivilege(input *GrantDatabasePrivilegeInput) (*GrantDatabasePrivilegeOutput, error) {
	req, out := c.GrantDatabasePrivilegeRequest(input)
	return out, req.Send()
}

// GrantDatabasePrivilegeWithContext is the same as GrantDatabasePrivilege with the addition of
// the ability to pass a context and additional request options.
//
// See GrantDatabasePrivilege for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) GrantDatabasePrivilegeWithContext(ctx volcengine.Context, input *GrantDatabasePrivilegeInput, opts ...request.Option) (*GrantDatabasePrivilegeOutput, error) {
	req, out := c.GrantDatabasePrivilegeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type DatabasePrivilegeForGrantDatabasePrivilegeInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `type:"string"`

	AccountPrivilege *string `type:"string" enum:"EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput"`

	AccountPrivilegeDetail *string `type:"string"`
}

// String returns the string representation
func (s DatabasePrivilegeForGrantDatabasePrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s DatabasePrivilegeForGrantDatabasePrivilegeInput) GoString() string {
	return s.String()
}

// SetAccountName sets the AccountName field's value.
func (s *DatabasePrivilegeForGrantDatabasePrivilegeInput) SetAccountName(v string) *DatabasePrivilegeForGrantDatabasePrivilegeInput {
	s.AccountName = &v
	return s
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *DatabasePrivilegeForGrantDatabasePrivilegeInput) SetAccountPrivilege(v string) *DatabasePrivilegeForGrantDatabasePrivilegeInput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeDetail sets the AccountPrivilegeDetail field's value.
func (s *DatabasePrivilegeForGrantDatabasePrivilegeInput) SetAccountPrivilegeDetail(v string) *DatabasePrivilegeForGrantDatabasePrivilegeInput {
	s.AccountPrivilegeDetail = &v
	return s
}

type GrantDatabasePrivilegeInput struct {
	_ struct{} `type:"structure"`

	// DBName is a required field
	DBName *string `min:"2" max:"64" type:"string" required:"true"`

	DatabasePrivileges []*DatabasePrivilegeForGrantDatabasePrivilegeInput `type:"list"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s GrantDatabasePrivilegeInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantDatabasePrivilegeInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *GrantDatabasePrivilegeInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "GrantDatabasePrivilegeInput"}
	if s.DBName == nil {
		invalidParams.Add(request.NewErrParamRequired("DBName"))
	}
	if s.DBName != nil && len(*s.DBName) < 2 {
		invalidParams.Add(request.NewErrParamMinLen("DBName", 2))
	}
	if s.DBName != nil && len(*s.DBName) > 64 {
		invalidParams.Add(request.NewErrParamMaxLen("DBName", 64, *s.DBName))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDBName sets the DBName field's value.
func (s *GrantDatabasePrivilegeInput) SetDBName(v string) *GrantDatabasePrivilegeInput {
	s.DBName = &v
	return s
}

// SetDatabasePrivileges sets the DatabasePrivileges field's value.
func (s *GrantDatabasePrivilegeInput) SetDatabasePrivileges(v []*DatabasePrivilegeForGrantDatabasePrivilegeInput) *GrantDatabasePrivilegeInput {
	s.DatabasePrivileges = v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *GrantDatabasePrivilegeInput) SetInstanceId(v string) *GrantDatabasePrivilegeInput {
	s.InstanceId = &v
	return s
}

type GrantDatabasePrivilegeOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s GrantDatabasePrivilegeOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s GrantDatabasePrivilegeOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputCustom is a EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputCustom = "Custom"

	// EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputDdlonly is a EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputDdlonly = "DDLOnly"

	// EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputDmlonly is a EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputDmlonly = "DMLOnly"

	// EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputNone is a EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputNone = "None"

	// EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputReadOnly is a EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputReadOnly = "ReadOnly"

	// EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputReadWrite is a EnumOfAccountPrivilegeForGrantDatabasePrivilegeInput enum value
	EnumOfAccountPrivilegeForGrantDatabasePrivilegeInputReadWrite = "ReadWrite"
)
