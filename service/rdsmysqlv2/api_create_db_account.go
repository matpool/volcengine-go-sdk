// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opCreateDBAccountCommon = "CreateDBAccount"

// CreateDBAccountCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDBAccountCommon operation. The "output" return
// value will be populated with the CreateDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBAccountCommon Send returns without error.
//
// See CreateDBAccountCommon for more information on using the CreateDBAccountCommon
// API call, and error handling.
//
//    // Example sending a request using the CreateDBAccountCommonRequest method.
//    req, resp := client.CreateDBAccountCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBAccountCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opCreateDBAccountCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBAccountCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation CreateDBAccountCommon for usage and error information.
func (c *RDSMYSQLV2) CreateDBAccountCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.CreateDBAccountCommonRequest(input)
	return out, req.Send()
}

// CreateDBAccountCommonWithContext is the same as CreateDBAccountCommon with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBAccountCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBAccountCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.CreateDBAccountCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBAccount = "CreateDBAccount"

// CreateDBAccountRequest generates a "volcengine/request.Request" representing the
// client's request for the CreateDBAccount operation. The "output" return
// value will be populated with the CreateDBAccountCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned CreateDBAccountCommon Request to send the API call to the service.
// the "output" return value is not valid until after CreateDBAccountCommon Send returns without error.
//
// See CreateDBAccount for more information on using the CreateDBAccount
// API call, and error handling.
//
//    // Example sending a request using the CreateDBAccountRequest method.
//    req, resp := client.CreateDBAccountRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) CreateDBAccountRequest(input *CreateDBAccountInput) (req *request.Request, output *CreateDBAccountOutput) {
	op := &request.Operation{
		Name:       opCreateDBAccount,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBAccountInput{}
	}

	output = &CreateDBAccountOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// CreateDBAccount API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation CreateDBAccount for usage and error information.
func (c *RDSMYSQLV2) CreateDBAccount(input *CreateDBAccountInput) (*CreateDBAccountOutput, error) {
	req, out := c.CreateDBAccountRequest(input)
	return out, req.Send()
}

// CreateDBAccountWithContext is the same as CreateDBAccount with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBAccount for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) CreateDBAccountWithContext(ctx volcengine.Context, input *CreateDBAccountInput, opts ...request.Option) (*CreateDBAccountOutput, error) {
	req, out := c.CreateDBAccountRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AccountPrivilegeForCreateDBAccountInput struct {
	_ struct{} `type:"structure"`

	AccountPrivilege *string `type:"string" enum:"EnumOfAccountPrivilegeForCreateDBAccountInput"`

	AccountPrivilegeDetail *string `type:"string"`

	DBName *string `type:"string"`
}

// String returns the string representation
func (s AccountPrivilegeForCreateDBAccountInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AccountPrivilegeForCreateDBAccountInput) GoString() string {
	return s.String()
}

// SetAccountPrivilege sets the AccountPrivilege field's value.
func (s *AccountPrivilegeForCreateDBAccountInput) SetAccountPrivilege(v string) *AccountPrivilegeForCreateDBAccountInput {
	s.AccountPrivilege = &v
	return s
}

// SetAccountPrivilegeDetail sets the AccountPrivilegeDetail field's value.
func (s *AccountPrivilegeForCreateDBAccountInput) SetAccountPrivilegeDetail(v string) *AccountPrivilegeForCreateDBAccountInput {
	s.AccountPrivilegeDetail = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *AccountPrivilegeForCreateDBAccountInput) SetDBName(v string) *AccountPrivilegeForCreateDBAccountInput {
	s.DBName = &v
	return s
}

type CreateDBAccountInput struct {
	_ struct{} `type:"structure"`

	AccountName *string `min:"2" max:"32" type:"string"`

	AccountPassword *string `min:"8" max:"32" type:"string"`

	AccountPrivileges []*AccountPrivilegeForCreateDBAccountInput `type:"list"`

	AccountType *string `type:"string" enum:"EnumOfAccountTypeForCreateDBAccountInput"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s CreateDBAccountInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBAccountInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *CreateDBAccountInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "CreateDBAccountInput"}
	if s.AccountName != nil && len(*s.AccountName) < 2 {
		invalidParams.Add(request.NewErrParamMinLen("AccountName", 2))
	}
	if s.AccountName != nil && len(*s.AccountName) > 32 {
		invalidParams.Add(request.NewErrParamMaxLen("AccountName", 32, *s.AccountName))
	}
	if s.AccountPassword != nil && len(*s.AccountPassword) < 8 {
		invalidParams.Add(request.NewErrParamMinLen("AccountPassword", 8))
	}
	if s.AccountPassword != nil && len(*s.AccountPassword) > 32 {
		invalidParams.Add(request.NewErrParamMaxLen("AccountPassword", 32, *s.AccountPassword))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetAccountName sets the AccountName field's value.
func (s *CreateDBAccountInput) SetAccountName(v string) *CreateDBAccountInput {
	s.AccountName = &v
	return s
}

// SetAccountPassword sets the AccountPassword field's value.
func (s *CreateDBAccountInput) SetAccountPassword(v string) *CreateDBAccountInput {
	s.AccountPassword = &v
	return s
}

// SetAccountPrivileges sets the AccountPrivileges field's value.
func (s *CreateDBAccountInput) SetAccountPrivileges(v []*AccountPrivilegeForCreateDBAccountInput) *CreateDBAccountInput {
	s.AccountPrivileges = v
	return s
}

// SetAccountType sets the AccountType field's value.
func (s *CreateDBAccountInput) SetAccountType(v string) *CreateDBAccountInput {
	s.AccountType = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *CreateDBAccountInput) SetInstanceId(v string) *CreateDBAccountInput {
	s.InstanceId = &v
	return s
}

type CreateDBAccountOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s CreateDBAccountOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBAccountOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfAccountPrivilegeForCreateDBAccountInputCustom is a EnumOfAccountPrivilegeForCreateDBAccountInput enum value
	EnumOfAccountPrivilegeForCreateDBAccountInputCustom = "Custom"

	// EnumOfAccountPrivilegeForCreateDBAccountInputDdlonly is a EnumOfAccountPrivilegeForCreateDBAccountInput enum value
	EnumOfAccountPrivilegeForCreateDBAccountInputDdlonly = "DDLOnly"

	// EnumOfAccountPrivilegeForCreateDBAccountInputDmlonly is a EnumOfAccountPrivilegeForCreateDBAccountInput enum value
	EnumOfAccountPrivilegeForCreateDBAccountInputDmlonly = "DMLOnly"

	// EnumOfAccountPrivilegeForCreateDBAccountInputNone is a EnumOfAccountPrivilegeForCreateDBAccountInput enum value
	EnumOfAccountPrivilegeForCreateDBAccountInputNone = "None"

	// EnumOfAccountPrivilegeForCreateDBAccountInputReadOnly is a EnumOfAccountPrivilegeForCreateDBAccountInput enum value
	EnumOfAccountPrivilegeForCreateDBAccountInputReadOnly = "ReadOnly"

	// EnumOfAccountPrivilegeForCreateDBAccountInputReadWrite is a EnumOfAccountPrivilegeForCreateDBAccountInput enum value
	EnumOfAccountPrivilegeForCreateDBAccountInputReadWrite = "ReadWrite"
)

const (
	// EnumOfAccountTypeForCreateDBAccountInputGrant is a EnumOfAccountTypeForCreateDBAccountInput enum value
	EnumOfAccountTypeForCreateDBAccountInputGrant = "Grant"

	// EnumOfAccountTypeForCreateDBAccountInputNormal is a EnumOfAccountTypeForCreateDBAccountInput enum value
	EnumOfAccountTypeForCreateDBAccountInputNormal = "Normal"

	// EnumOfAccountTypeForCreateDBAccountInputSuper is a EnumOfAccountTypeForCreateDBAccountInput enum value
	EnumOfAccountTypeForCreateDBAccountInputSuper = "Super"
)
