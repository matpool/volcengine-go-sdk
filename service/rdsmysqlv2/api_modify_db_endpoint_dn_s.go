// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdsmysqlv2

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opModifyDBEndpointDNSCommon = "ModifyDBEndpointDNS"

// ModifyDBEndpointDNSCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBEndpointDNSCommon operation. The "output" return
// value will be populated with the ModifyDBEndpointDNSCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointDNSCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointDNSCommon Send returns without error.
//
// See ModifyDBEndpointDNSCommon for more information on using the ModifyDBEndpointDNSCommon
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointDNSCommonRequest method.
//    req, resp := client.ModifyDBEndpointDNSCommonRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBEndpointDNSCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opModifyDBEndpointDNSCommon,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointDNSCommon API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBEndpointDNSCommon for usage and error information.
func (c *RDSMYSQLV2) ModifyDBEndpointDNSCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointDNSCommonRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointDNSCommonWithContext is the same as ModifyDBEndpointDNSCommon with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointDNSCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBEndpointDNSCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.ModifyDBEndpointDNSCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBEndpointDNS = "ModifyDBEndpointDNS"

// ModifyDBEndpointDNSRequest generates a "volcengine/request.Request" representing the
// client's request for the ModifyDBEndpointDNS operation. The "output" return
// value will be populated with the ModifyDBEndpointDNSCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned ModifyDBEndpointDNSCommon Request to send the API call to the service.
// the "output" return value is not valid until after ModifyDBEndpointDNSCommon Send returns without error.
//
// See ModifyDBEndpointDNS for more information on using the ModifyDBEndpointDNS
// API call, and error handling.
//
//    // Example sending a request using the ModifyDBEndpointDNSRequest method.
//    req, resp := client.ModifyDBEndpointDNSRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
func (c *RDSMYSQLV2) ModifyDBEndpointDNSRequest(input *ModifyDBEndpointDNSInput) (req *request.Request, output *ModifyDBEndpointDNSOutput) {
	op := &request.Operation{
		Name:       opModifyDBEndpointDNS,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBEndpointDNSInput{}
	}

	output = &ModifyDBEndpointDNSOutput{}
	req = c.newRequest(op, input, output)

	req.HTTPRequest.Header.Set("Content-Type", "application/json; charset=utf-8")

	return
}

// ModifyDBEndpointDNS API operation for RDS_MYSQL_V2.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for RDS_MYSQL_V2's
// API operation ModifyDBEndpointDNS for usage and error information.
func (c *RDSMYSQLV2) ModifyDBEndpointDNS(input *ModifyDBEndpointDNSInput) (*ModifyDBEndpointDNSOutput, error) {
	req, out := c.ModifyDBEndpointDNSRequest(input)
	return out, req.Send()
}

// ModifyDBEndpointDNSWithContext is the same as ModifyDBEndpointDNS with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBEndpointDNS for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *RDSMYSQLV2) ModifyDBEndpointDNSWithContext(ctx volcengine.Context, input *ModifyDBEndpointDNSInput, opts ...request.Option) (*ModifyDBEndpointDNSOutput, error) {
	req, out := c.ModifyDBEndpointDNSRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ModifyDBEndpointDNSInput struct {
	_ struct{} `type:"structure"`

	// DNSVisibility is a required field
	DNSVisibility *bool `type:"boolean" required:"true"`

	// EndpointId is a required field
	EndpointId *string `type:"string" required:"true"`

	// InstanceId is a required field
	InstanceId *string `type:"string" required:"true"`

	// NetworkType is a required field
	NetworkType *string `type:"string" required:"true" enum:"EnumOfNetworkTypeForModifyDBEndpointDNSInput"`
}

// String returns the string representation
func (s ModifyDBEndpointDNSInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointDNSInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *ModifyDBEndpointDNSInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "ModifyDBEndpointDNSInput"}
	if s.DNSVisibility == nil {
		invalidParams.Add(request.NewErrParamRequired("DNSVisibility"))
	}
	if s.EndpointId == nil {
		invalidParams.Add(request.NewErrParamRequired("EndpointId"))
	}
	if s.InstanceId == nil {
		invalidParams.Add(request.NewErrParamRequired("InstanceId"))
	}
	if s.NetworkType == nil {
		invalidParams.Add(request.NewErrParamRequired("NetworkType"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetDNSVisibility sets the DNSVisibility field's value.
func (s *ModifyDBEndpointDNSInput) SetDNSVisibility(v bool) *ModifyDBEndpointDNSInput {
	s.DNSVisibility = &v
	return s
}

// SetEndpointId sets the EndpointId field's value.
func (s *ModifyDBEndpointDNSInput) SetEndpointId(v string) *ModifyDBEndpointDNSInput {
	s.EndpointId = &v
	return s
}

// SetInstanceId sets the InstanceId field's value.
func (s *ModifyDBEndpointDNSInput) SetInstanceId(v string) *ModifyDBEndpointDNSInput {
	s.InstanceId = &v
	return s
}

// SetNetworkType sets the NetworkType field's value.
func (s *ModifyDBEndpointDNSInput) SetNetworkType(v string) *ModifyDBEndpointDNSInput {
	s.NetworkType = &v
	return s
}

type ModifyDBEndpointDNSOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata
}

// String returns the string representation
func (s ModifyDBEndpointDNSOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBEndpointDNSOutput) GoString() string {
	return s.String()
}

const (
	// EnumOfNetworkTypeForModifyDBEndpointDNSInputCarma is a EnumOfNetworkTypeForModifyDBEndpointDNSInput enum value
	EnumOfNetworkTypeForModifyDBEndpointDNSInputCarma = "Carma"

	// EnumOfNetworkTypeForModifyDBEndpointDNSInputIngress is a EnumOfNetworkTypeForModifyDBEndpointDNSInput enum value
	EnumOfNetworkTypeForModifyDBEndpointDNSInputIngress = "Ingress"

	// EnumOfNetworkTypeForModifyDBEndpointDNSInputInner is a EnumOfNetworkTypeForModifyDBEndpointDNSInput enum value
	EnumOfNetworkTypeForModifyDBEndpointDNSInputInner = "Inner"

	// EnumOfNetworkTypeForModifyDBEndpointDNSInputPrivate is a EnumOfNetworkTypeForModifyDBEndpointDNSInput enum value
	EnumOfNetworkTypeForModifyDBEndpointDNSInputPrivate = "Private"

	// EnumOfNetworkTypeForModifyDBEndpointDNSInputPublic is a EnumOfNetworkTypeForModifyDBEndpointDNSInput enum value
	EnumOfNetworkTypeForModifyDBEndpointDNSInputPublic = "Public"
)
