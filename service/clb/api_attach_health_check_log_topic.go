// Code generated by volcengine with private/model/cli/gen-api/main.go. DO NOT EDIT.

package clb

import (
	"github.com/matpool/volcengine-go-sdk/volcengine"
	"github.com/matpool/volcengine-go-sdk/volcengine/request"
	"github.com/matpool/volcengine-go-sdk/volcengine/response"
	"github.com/matpool/volcengine-go-sdk/volcengine/volcengineutil"
)

const opAttachHealthCheckLogTopicCommon = "AttachHealthCheckLogTopic"

// AttachHealthCheckLogTopicCommonRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachHealthCheckLogTopicCommon operation. The "output" return
// value will be populated with the AttachHealthCheckLogTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachHealthCheckLogTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachHealthCheckLogTopicCommon Send returns without error.
//
// See AttachHealthCheckLogTopicCommon for more information on using the AttachHealthCheckLogTopicCommon
// API call, and error handling.
//
//	// Example sending a request using the AttachHealthCheckLogTopicCommonRequest method.
//	req, resp := client.AttachHealthCheckLogTopicCommonRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *CLB) AttachHealthCheckLogTopicCommonRequest(input *map[string]interface{}) (req *request.Request, output *map[string]interface{}) {
	op := &request.Operation{
		Name:       opAttachHealthCheckLogTopicCommon,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &map[string]interface{}{}
	}

	output = &map[string]interface{}{}
	req = c.newRequest(op, input, output)

	return
}

// AttachHealthCheckLogTopicCommon API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation AttachHealthCheckLogTopicCommon for usage and error information.
func (c *CLB) AttachHealthCheckLogTopicCommon(input *map[string]interface{}) (*map[string]interface{}, error) {
	req, out := c.AttachHealthCheckLogTopicCommonRequest(input)
	return out, req.Send()
}

// AttachHealthCheckLogTopicCommonWithContext is the same as AttachHealthCheckLogTopicCommon with the addition of
// the ability to pass a context and additional request options.
//
// See AttachHealthCheckLogTopicCommon for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If the context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AttachHealthCheckLogTopicCommonWithContext(ctx volcengine.Context, input *map[string]interface{}, opts ...request.Option) (*map[string]interface{}, error) {
	req, out := c.AttachHealthCheckLogTopicCommonRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAttachHealthCheckLogTopic = "AttachHealthCheckLogTopic"

// AttachHealthCheckLogTopicRequest generates a "volcengine/request.Request" representing the
// client's request for the AttachHealthCheckLogTopic operation. The "output" return
// value will be populated with the AttachHealthCheckLogTopicCommon request's response once the request completes
// successfully.
//
// Use "Send" method on the returned AttachHealthCheckLogTopicCommon Request to send the API call to the service.
// the "output" return value is not valid until after AttachHealthCheckLogTopicCommon Send returns without error.
//
// See AttachHealthCheckLogTopic for more information on using the AttachHealthCheckLogTopic
// API call, and error handling.
//
//	// Example sending a request using the AttachHealthCheckLogTopicRequest method.
//	req, resp := client.AttachHealthCheckLogTopicRequest(params)
//
//	err := req.Send()
//	if err == nil { // resp is now filled
//	    fmt.Println(resp)
//	}
func (c *CLB) AttachHealthCheckLogTopicRequest(input *AttachHealthCheckLogTopicInput) (req *request.Request, output *AttachHealthCheckLogTopicOutput) {
	op := &request.Operation{
		Name:       opAttachHealthCheckLogTopic,
		HTTPMethod: "GET",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AttachHealthCheckLogTopicInput{}
	}

	output = &AttachHealthCheckLogTopicOutput{}
	req = c.newRequest(op, input, output)

	return
}

// AttachHealthCheckLogTopic API operation for CLB.
//
// Returns volcengineerr.Error for service API and SDK errors. Use runtime type assertions
// with volcengineerr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the VOLCENGINE API reference guide for CLB's
// API operation AttachHealthCheckLogTopic for usage and error information.
func (c *CLB) AttachHealthCheckLogTopic(input *AttachHealthCheckLogTopicInput) (*AttachHealthCheckLogTopicOutput, error) {
	req, out := c.AttachHealthCheckLogTopicRequest(input)
	return out, req.Send()
}

// AttachHealthCheckLogTopicWithContext is the same as AttachHealthCheckLogTopic with the addition of
// the ability to pass a context and additional request options.
//
// See AttachHealthCheckLogTopic for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. Ifthe context is nil a panic will occur.
// In the future the SDK may create sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *CLB) AttachHealthCheckLogTopicWithContext(ctx volcengine.Context, input *AttachHealthCheckLogTopicInput, opts ...request.Option) (*AttachHealthCheckLogTopicOutput, error) {
	req, out := c.AttachHealthCheckLogTopicRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AttachHealthCheckLogTopicInput struct {
	_ struct{} `type:"structure"`

	// LoadBalancerId is a required field
	LoadBalancerId *string `type:"string" required:"true"`

	// LogTopicId is a required field
	LogTopicId *string `type:"string" required:"true"`
}

// String returns the string representation
func (s AttachHealthCheckLogTopicInput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachHealthCheckLogTopicInput) GoString() string {
	return s.String()
}

// Validate inspects the fields of the type to determine if they are valid.
func (s *AttachHealthCheckLogTopicInput) Validate() error {
	invalidParams := request.ErrInvalidParams{Context: "AttachHealthCheckLogTopicInput"}
	if s.LoadBalancerId == nil {
		invalidParams.Add(request.NewErrParamRequired("LoadBalancerId"))
	}
	if s.LogTopicId == nil {
		invalidParams.Add(request.NewErrParamRequired("LogTopicId"))
	}

	if invalidParams.Len() > 0 {
		return invalidParams
	}
	return nil
}

// SetLoadBalancerId sets the LoadBalancerId field's value.
func (s *AttachHealthCheckLogTopicInput) SetLoadBalancerId(v string) *AttachHealthCheckLogTopicInput {
	s.LoadBalancerId = &v
	return s
}

// SetLogTopicId sets the LogTopicId field's value.
func (s *AttachHealthCheckLogTopicInput) SetLogTopicId(v string) *AttachHealthCheckLogTopicInput {
	s.LogTopicId = &v
	return s
}

type AttachHealthCheckLogTopicOutput struct {
	_ struct{} `type:"structure"`

	Metadata *response.ResponseMetadata

	RequestId *string `type:"string"`
}

// String returns the string representation
func (s AttachHealthCheckLogTopicOutput) String() string {
	return volcengineutil.Prettify(s)
}

// GoString returns the string representation
func (s AttachHealthCheckLogTopicOutput) GoString() string {
	return s.String()
}

// SetRequestId sets the RequestId field's value.
func (s *AttachHealthCheckLogTopicOutput) SetRequestId(v string) *AttachHealthCheckLogTopicOutput {
	s.RequestId = &v
	return s
}
